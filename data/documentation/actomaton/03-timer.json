{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Actomaton\/documentation\/Actomaton\/Effect"},{"type":"text","text":"."},{"type":"reference","isActive":true,"identifier":"doc:\/\/Actomaton\/documentation\/Actomaton\/Effect\/init(id:sequence:)"},{"type":"text","text":" is used for timer effect, which yields "},{"type":"codeVoice","code":"Action.tick"},{"type":"text","text":" multiple times."}]},{"type":"codeListing","syntax":"swift","code":["enum Action: Sendable {","    case start, tick, stop","}","","typealias State = Int","","struct TimerID: EffectIDProtocol {}","","struct Environment: Sendable {","    let timerEffect: Effect<Action>","}","","let environment = Environment(","    timerEffect: { userId in","        Effect(id: TimerID(), sequence: {","            AsyncStream<()> { continuation in","                let task = Task {","                    while true {","                        try await Task.sleep(\/* 1 sec *\/)","                        continuation.yield(())","                    }","                }","","                continuation.onTermination = { @Sendable _ in","                    task.cancel()","                }","            }","        })","    }",")","","let reducer = Reducer { action, state, environment in","    switch action {","    case .start:","        return environment.timerEffect","    case .tick:","        state += 1","        return .empty","    case .stop:","        return Effect.cancel(id: TimerID())","    }","}","","let actomaton = Actomaton<Action, State>(","    state: 0,","    reducer: reducer,","    environment: environment",")","","@main","enum Main {","    static func test_timer() async {","        assertEqual(await actomaton.state, 0)","","        await actomaton.send(.start)","","        assertEqual(await actomaton.state, 0)","","        try await Task.sleep(\/* 1 sec *\/)","        assertEqual(await actomaton.state, 1)","","        try await Task.sleep(\/* 1 sec *\/)","        assertEqual(await actomaton.state, 2)","","        try await Task.sleep(\/* 1 sec *\/)","        assertEqual(await actomaton.state, 3)","","        await actomaton.send(.stop)","","        try await Task.sleep(\/* long enough *\/)","        assertEqual(await actomaton.state, 3,","                    \"Should not increment because timer is stopped.\")","    }","}"]},{"anchor":"Next-Step","level":2,"type":"heading","text":"Next Step"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Actomaton\/documentation\/Actomaton\/04-EffectQueue"}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/actomaton\/03-timer"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Actomaton\/documentation\/Actomaton\/03-Timer","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":"-based timer example."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Example 3: Timer","role":"article","modules":[{"name":"Actomaton"}]},"hierarchy":{"paths":[["doc:\/\/Actomaton\/documentation\/Actomaton"]]},"references":{"doc://Actomaton/documentation/Actomaton/EffectQueue":{"role":"symbol","title":"EffectQueue","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectQueue"}],"abstract":[{"type":"text","text":"Effect queue for automatic cancellation of existing tasks or suspending of new effects."}],"identifier":"doc:\/\/Actomaton\/documentation\/Actomaton\/EffectQueue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EffectQueue"}],"url":"\/documentation\/actomaton\/effectqueue"},"doc://Actomaton/documentation/Actomaton/04-EffectQueue":{"role":"article","title":"Example 4: EffectQueue","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Actomaton\/documentation\/Actomaton\/EffectQueue"},{"type":"text","text":" example."}],"identifier":"doc:\/\/Actomaton\/documentation\/Actomaton\/04-EffectQueue","kind":"article","type":"topic","url":"\/documentation\/actomaton\/04-effectqueue"},"doc://Actomaton/documentation/Actomaton/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[{"type":"text","text":"Effect type to run "},{"type":"codeVoice","code":"async"},{"type":"text","text":", "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":", or cancellation."}],"identifier":"doc:\/\/Actomaton\/documentation\/Actomaton\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/actomaton\/effect"},"doc://Actomaton/documentation/Actomaton/Effect/init(id:sequence:)":{"role":"symbol","title":"init(id:sequence:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ID"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ID","preciseIdentifier":"s:9Actomaton6EffectV2id8sequenceACyxGqd__Sg_qd_0_SgyYaYbKctc7ElementQyd_0_RszAA0B10IDProtocolRd__SciRd_0_r0_lufc2IDL_qd__mfp"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"sequence"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"S","preciseIdentifier":"s:9Actomaton6EffectV2id8sequenceACyxGqd__Sg_qd_0_SgyYaYbKctc7ElementQyd_0_RszAA0B10IDProtocolRd__SciRd_0_r0_lufc1SL_qd_0_mfp"},{"kind":"text","text":"?)"}],"abstract":[{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" side-effect."}],"identifier":"doc:\/\/Actomaton\/documentation\/Actomaton\/Effect\/init(id:sequence:)","kind":"symbol","type":"topic","url":"\/documentation\/actomaton\/effect\/init(id:sequence:)"},"doc://Actomaton/documentation/Actomaton":{"role":"collection","title":"Actomaton","abstract":[{"type":"text","text":"Swift "},{"type":"codeVoice","code":"async"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"await"},{"type":"text","text":" & "},{"type":"codeVoice","code":"Actor"},{"type":"text","text":"-powered effectful state-management framework."},{"type":"text","text":" "},{"type":"text","text":"Linux ready."}],"identifier":"doc:\/\/Actomaton\/documentation\/Actomaton","kind":"symbol","type":"topic","url":"\/documentation\/actomaton"}}}