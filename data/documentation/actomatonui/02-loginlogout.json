{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"login-logout.png"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"このチュートリアルでは、上図の状態遷移を Actomaton 上で設計します。"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"状態：ログイン中、ログイン後、ログアウト中、ログアウト後"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"アクション： ログイン、 ログアウト、 強制ログアウト"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"内部アクション：ログイン完了、ログアウト完了"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ログインとログアウト時に API 通信を行う（副作用）"}]}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"特に、次の "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" の副作用管理の機能について見ていきます。"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Effect"},{"type":"text","text":" (副作用) の実装"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectID"},{"type":"text","text":" による副作用の手動キャンセル"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectQueue"},{"type":"text","text":" による副作用の自動キャンセル・自動サスペンド"}]}]}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"今回の実装ではコアモジュールの "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" を状態機械として使用しますが、"},{"type":"text","text":" "},{"type":"text","text":"UI 開発向けの "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" や "},{"type":"codeVoice","code":"RouteStore"},{"type":"text","text":" に置き換えることも可能です。"}]}],"type":"aside","name":"Tip"},{"anchor":"Action-State-Reducer-Effect","level":2,"type":"heading","text":"Action, State, Reducer, Effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"まず、基本的な "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" 、 "},{"type":"codeVoice","code":"State"},{"type":"text","text":" 、 "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を定義しましょう。"}]},{"type":"codeListing","syntax":"swift","code":["enum Action: Sendable {","    case login, loginOK, logout, logoutOK","    case forceLogout","}","","enum State: Equatable, Sendable {","    case loggedOut, loggingIn, loggedIn, loggingOut","}","","let reducer = Reducer { action, state, environment in","    switch (action, state) {","    case (.login, .loggedOut):","        state = .loggingIn","        return login(state.userId) \/\/ ログイン処理（副作用）","","    case (.loginOK, .loggingIn):","        state = .loggedIn","        return .empty","","    case (.logout, .loggedIn),","        (.forceLogout, .loggingIn),","        (.forceLogout, .loggedIn):","        state = .loggingOut","        return logout() \/\/ ログアウト処理（副作用）","","    case (.logoutOK, .loggingOut):","        state = .loggedOut","        return .empty","","    default:","        return Effect.fireAndForget {","            print(\"State transition failed...\")","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ここでは、"},{"type":"codeVoice","code":"login"},{"type":"text","text":"、"},{"type":"codeVoice","code":"logout"},{"type":"text","text":" 時に副作用を伴う関数を "},{"type":"codeVoice","code":"return"},{"type":"text","text":" しているほか、画面遷移の失敗時に "},{"type":"codeVoice","code":"default"},{"type":"text","text":" 句で "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":" （副作用）が "},{"type":"codeVoice","code":"print"},{"type":"text","text":" 出力を行うように定義されています。"}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"これらの副作用は "},{"type":"codeVoice","code":"return"},{"type":"text","text":" されているだけで、まだ実行されていません！ なので、この "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" は "},{"type":"strong","inlineContent":[{"type":"text","text":"純粋関数"}]},{"type":"text","text":" です。実際には "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を純粋関数として実行した後、得られた "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":" について Actomaton の内部で遅延評価されます（このとき初めて「現実世界における副作用」が発生します）。副作用を常に "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":" の中に宣言することが、副作用を適切に管理・設計する上で “とてもとても” 大切です。"}]}],"type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Effect"},{"type":"text","text":" の実装方法は5種類があります。特に重要なのが 3. 4. 5. です（3. は 1. と 2. を兼ねます）。"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"副作用を発生せず、次のアクションのみを転送する"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Effect.nextAction()"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"async"},{"type":"text","text":" 関数で副作用を発生し、次のアクションは送らない"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Effect.fireAndForget(id:queue:run:)"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"async"},{"type":"text","text":" 関数で副作用を発生し、次のアクションを送る"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Effect.init(id:queue:run:)"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" で副作用を発生させつつ次のアクションを送る処理を「複数回」行う"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Effect.init(id:queue:sequence:)"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectID"},{"type":"text","text":" を使った手動キャンセル"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Effect.cancel(id:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Effect.cancel(ids:)"}]}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectID"},{"type":"text","text":" によるキャンセルの方法と "},{"type":"codeVoice","code":"EffectQueue"},{"type":"text","text":" を使ったより高度な副作用管理については、次節で詳しく解説します。"}]},{"anchor":"Environment-副作用コンテナとしての外部環境","level":2,"type":"heading","text":"Environment (副作用コンテナとしての外部環境)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"次に、 "},{"type":"codeVoice","code":"login"},{"type":"text","text":" と "},{"type":"codeVoice","code":"logout"},{"type":"text","text":" 関数を実装します。"}]},{"type":"codeListing","syntax":"swift","code":["struct Environment: Sendable {","    let login: @Sendable (userId: String) -> Effect<Action>","    let logout: Effect<Action>","}","","let environment = Environment(","    login: { userId in","        Effect {","            let loginRequest = ...","            let data = try? await URLSession.shared.data(for: loginRequest) \/\/ API 通信","            ...","            return Action.loginOK \/\/ 次のアクション","        }","    },","    logout: Effect {","        let logoutRequest = ...","        let data = try? await URLSession.shared.data(for: logoutRequest) \/\/ API 通信","        ...","        return Action.logoutOK \/\/ 次のアクション","    }",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ここで "},{"type":"codeVoice","code":"struct Environment"},{"type":"text","text":" がはじめて使われていますが、これは依存注入コンテナ (Dependency Injection Container) と考えるのが分かりやすいです。"},{"type":"text","text":" "},{"type":"text","text":"例えば、モックに差し替えたい場合は、"}]},{"type":"codeListing","syntax":"swift","code":["let mockEnvironment = Environment(","    login: { userId in","        Effect.nextAction(.loginOK) \/\/ API 通信をせず、次のアクションだけ送る","    },","    logout: Effect.nextAction(.logoutOK)",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"のように、"},{"type":"codeVoice","code":"Effect"},{"type":"text","text":" 内部で API 通信などの副作用を実行せず次のアクションのみを送る処理に変更できます。"},{"type":"text","text":" "},{"type":"text","text":"この方法を使うことで、 "},{"type":"strong","inlineContent":[{"type":"text","text":"副作用を発生しないユニットテスト"}]},{"type":"text","text":" が手軽に実行できます。"}]},{"anchor":"EffectID-と-EffectQueue-による副作用管理","level":2,"type":"heading","text":"EffectID と EffectQueue による副作用管理"},{"type":"paragraph","inlineContent":[{"type":"text","text":"前述の "},{"type":"codeVoice","code":"environment"},{"type":"text","text":" 実装で API 通信として定義した "},{"type":"codeVoice","code":"login"},{"type":"text","text":" と "},{"type":"codeVoice","code":"logout"},{"type":"text","text":" ですが、例えば今回の例における "},{"type":"codeVoice","code":"forceLogout"},{"type":"text","text":" のように、 "},{"type":"strong","inlineContent":[{"type":"text","text":"ログイン途中でも強制的にキャンセルしてログアウト処理に移行したい"}]},{"type":"text","text":" 場合などが考えられます。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"このようなシナリオでは、次の2つのキャンセル処理のアプローチを検討することができます。"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectID"},{"type":"text","text":" による手動キャンセル"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectQueue"},{"type":"text","text":" による自動キャンセル"}]}]}]},{"anchor":"1-EffectID-による手動キャンセル","level":3,"type":"heading","text":"1. EffectID による手動キャンセル"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Effect"},{"type":"text","text":" の初期化時に識別子として "},{"type":"codeVoice","code":"EffectID"},{"type":"text","text":" を付与し、 "},{"type":"codeVoice","code":"Effect.cancel(id:)"},{"type":"text","text":" を手動で呼ぶ方法です。"},{"type":"text","text":" "},{"type":"text","text":"具体的には "},{"type":"codeVoice","code":"protocol EffectIDProtocol"},{"type":"text","text":" を使い、 "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" な識別子を "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":" の初期化時に渡します。"}]},{"type":"codeListing","syntax":"swift","code":["struct LoginEffectID: EffectIDProtocol {} \/\/ 空実装でOK","","let environment = Environment(","    login: { userId in","        Effect(id: LoginFlowEffectID()) { \/\/ EffectID 追加","            ... \/\/ 実際のログイン処理","        }","    },","    logout: Effect.cancel(id: LoginFlowEffectID()) \/\/ 事前にキャンセル処理","        + Effect { \/\/ Effect の足し算","            ... \/\/ 実際のログアウト処理","        }",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"このように、「実際のログアウト処理」の前に「キャンセル」を呼ぶことができます。"},{"type":"text","text":" "},{"type":"text","text":"面白いことに "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"Effect"},{"type":"text","text":" は足し算を使って合成"}]},{"type":"text","text":" することができるのです！"},{"type":"text","text":" "},{"type":"text","text":"（もちろん、キャンセル処理を単体として実装することも可能です）"}]},{"anchor":"2-EffectQueue-による自動キャンセル","level":3,"type":"heading","text":"2. EffectQueue による自動キャンセル"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectID"},{"type":"text","text":" による手動キャンセルは、毎回直前に "},{"type":"codeVoice","code":"Effect.cancel(id:)"},{"type":"text","text":" を書く必要性があるため、時として面倒に感じることもあります。"},{"type":"text","text":" "},{"type":"text","text":"その場合は Actomaton の "},{"type":"codeVoice","code":"EffectQueue"},{"type":"text","text":" を使った、より高度な副作用管理システムを試してみて下さい。"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectID"},{"type":"text","text":" と同様、"},{"type":"codeVoice","code":"EffectQueue"},{"type":"text","text":" もまた Hashable ベースの識別子として、 "},{"type":"codeVoice","code":"protocol EffectQueueProtocol"},{"type":"text","text":" を採用することで作成できます。"},{"type":"text","text":" "},{"type":"text","text":"今回の例では、その中でも最も利用頻度の高い "},{"type":"codeVoice","code":"Newest1EffectQueueProtocol"},{"type":"text","text":" サブプロトコルを使います。"},{"type":"text","text":" "},{"type":"text","text":"これは "},{"type":"strong","inlineContent":[{"type":"text","text":"最新1件の副作用のみを実行し、直前までに同じキューで登録されていた副作用をすべてキャンセルする"}]},{"type":"text","text":" というキューです。"}]},{"type":"codeListing","syntax":"swift","code":["struct LoginFlowEffectQueue: Newest1EffectQueueProtocol {} \/\/ 空実装でOK","","let environment = Environment(","    login: { userId in","        Effect(queue: LoginFlowEffectQueue()) { \/\/ EffectQueue に追加","            ... \/\/ 実際のログイン処理","        }","    },","    logout: Effect(queue: LoginFlowEffectQueue()) { \/\/ EffectQueue に追加","        ... \/\/ 実際のログアウト処理","    }",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"このように "},{"type":"codeVoice","code":"login"},{"type":"text","text":" と "},{"type":"codeVoice","code":"logout"},{"type":"text","text":" が同じキューに登録されることを明記することで、"},{"type":"text","text":" "},{"type":"text","text":"互いの最新のタスクのみを実行し、古いタスクについては自動的にキャンセルされます。"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"リアクティブプログラミング (Rx) における "},{"type":"codeVoice","code":"Rx.flatMapLatest"},{"type":"text","text":" と同じ処理を実現しています。"}]}],"type":"aside","name":"Note"},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"codeVoice","code":"EffectQueue"},{"type":"text","text":" の種類には："}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Newest1EffectQueueProtocol"},{"type":"text","text":" (Rx.flatMapLatest)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Oldest1DiscardNewEffectQueueProtocol"},{"type":"text","text":" (Rx.flatMapFirst)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Oldest1SuspendNewEffectQueueProtocol"},{"type":"text","text":" (Rx.concat)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"などがビルトインで定義されており、カスタムで最大同時実行数の設定もできます。"}]}],"type":"aside","name":"Important"},{"anchor":"Actomaton-の実装とテスト","level":2,"type":"heading","text":"Actomaton の実装とテスト"},{"type":"paragraph","inlineContent":[{"type":"text","text":"それでは最後に、上記の設計図から "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" を生成してテストを書いてみましょう。"}]},{"type":"codeListing","syntax":"swift","code":["let actomaton = Actomaton<Action, State>(","    state: .loggedOut,","    reducer: reducer,","    environment: environment \/\/ 依存注入コンテナを追加",")","","@main","enum Main {","    static func test_login_logout() async {","        var t: Task<(), Error>?","","        \/\/ ログアウト状態","        assertEqual(await actomaton.state, .loggedOut)","","        \/\/ ログイン","        t = await actomaton.send(.login)","        assertEqual(await actomaton.state, .loggingIn)","","        await t?.value \/\/ 完了まで待機","","        \/\/ ログイン完了状態","        assertEqual(await actomaton.state, .loggedIn)","","        \/\/ ログアウト","        t = await actomaton.send(.logout)","","        \/\/ ログアウト中状態","        assertEqual(await actomaton.state, .loggingOut)","","        await t?.value \/\/ 完了まで待機","","        \/\/ ログアウト完了状態","        assertEqual(await actomaton.state, .loggedOut)","    }","","    static func test_login_forceLogout() async throws {","        var t: Task<(), Error>?","","        \/\/ ログアウト状態","        assertEqual(await actomaton.state, .loggedOut)","","        \/\/ ログイン","        await actomaton.send(.login)","        assertEqual(await actomaton.state, .loggingIn)","","        \/\/ 少し待機してから強制ログアウト","        try await Task.sleep(\/* 1 ms *\/)","        t = await actomaton.send(.forceLogout)","","        \/\/ ログアウト中状態","        assertEqual(await actomaton.state, .loggingOut)","","        await t?.value \/\/ 完了まで待機","","        \/\/ ログアウト完了状態","        assertEqual(await actomaton.state, .loggedOut)","    }","}"]},{"anchor":"サンプルコード","level":2,"type":"heading","text":"サンプルコード"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/Actomaton\/Actomaton-Gallery\/blob\/main\/Sources\/StateDiagram\/StateDiagram.swift"}]},{"anchor":"Next-Step","level":2,"type":"heading","text":"Next Step"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/03-RouteStore"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/actomatonui\/02-loginlogout"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/02-LoginLogout","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"認証フローで行われる複雑な状態管理とその副作用管理を扱う例"}],"kind":"article","metadata":{"roleHeading":"Article","title":"2. 認証フローの状態管理・副作用管理","role":"article","modules":[{"name":"ActomatonUI"}]},"hierarchy":{"paths":[["doc:\/\/ActomatonUI\/documentation\/ActomatonUI"]]},"references":{"doc://ActomatonUI/documentation/ActomatonUI/03-RouteStore":{"role":"article","title":"3. RouteStore によるルーティング","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" を使って他の "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" にメッセージングする例"}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/03-RouteStore","kind":"article","type":"topic","url":"\/documentation\/actomatonui\/03-routestore"},"doc://ActomatonUI/documentation/ActomatonUI":{"role":"collection","title":"ActomatonUI","abstract":[{"type":"text","text":"Swift Concurrency (async\/await、Structured Concurrency、Actor) を使った、状態と副作用の管理のためのフレームワーク。"}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI","kind":"symbol","type":"topic","url":"\/documentation\/actomatonui"},"doc://ActomatonUI/documentation/ActomatonUI/RouteStore":{"role":"symbol","title":"RouteStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouteStore"}],"abstract":[{"type":"codeVoice","code":"Store"},{"type":"text","text":" wrapper that also outputs "},{"type":"codeVoice","code":"routes"},{"type":"text","text":", mainly used for UIKit’s navigation handling."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouteStore"}],"url":"\/documentation\/actomatonui\/routestore"},"https://github.com/Actomaton/Actomaton-Gallery/blob/main/Sources/StateDiagram/StateDiagram.swift":{"title":"Actomaton-Gallery\/StateDiagram.swift","titleInlineContent":[{"type":"text","text":"Actomaton-Gallery\/StateDiagram.swift"}],"type":"link","identifier":"https:\/\/github.com\/Actomaton\/Actomaton-Gallery\/blob\/main\/Sources\/StateDiagram\/StateDiagram.swift","url":"https:\/\/github.com\/Actomaton\/Actomaton-Gallery\/blob\/main\/Sources\/StateDiagram\/StateDiagram.swift"},"login-logout.png":{"alt":"login-diagram","type":"image","identifier":"login-logout.png","variants":[{"url":"\/images\/login-logout.png","traits":["1x","light"]}]}}}