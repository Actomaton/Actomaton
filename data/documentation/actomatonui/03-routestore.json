{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" は Elm Architecture をベースに設計されており、理想的な使い方として 1 つの "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" (状態機械) のみでアプリの全画面を設計する（複数の "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を合成する関数型プログラミング方式）のに最も適しています。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"しかし、実際の iOS アプリ開発の現場では、"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"関数型プログラミングの難易度が高い ("},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" の合成が理解しにくい)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"宣言的な SwiftUI が使えず、引き続き UIKit と UI binding を使って開発する必要があり、1つの状態機械では扱いにくい"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"といった理由で、そのままの形で導入するにはハードルが高いことがしばしば挙げられます。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"この "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" チュートリアルでは、 "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" (状態機械) を "},{"type":"strong","inlineContent":[{"type":"text","text":"個々の画面単位で独立に定義して、"},{"type":"text","text":" "},{"type":"text","text":"互いにメッセージングし合いながら従来の MVVM 開発（オブジェクト指向プログラミング方式）をサポートする仕組み"}]},{"type":"text","text":" について解説します。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"この記事では、主に次の型について見ていきます"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" (外部ルーティング処理)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/SendRouteEnvironment"},{"type":"text","text":" による "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/SendRouteEnvironment\/sendRoute"},{"type":"text","text":" 可能な "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" ラッパー"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/HostingViewController"},{"type":"text","text":" と組み合わせた SwiftUI View 開発"}]}]}]},{"anchor":"例題","level":2,"type":"heading","text":"例題"},{"type":"paragraph","inlineContent":[{"type":"text","text":"ここでは、前回の "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/01-Counter"},{"type":"text","text":" における "},{"type":"codeVoice","code":"increment"},{"type":"text","text":" ボタンのほか、"},{"type":"codeVoice","code":"push"},{"type":"text","text":" ボタンをタップして "},{"type":"codeVoice","code":"UINavigationController"},{"type":"text","text":" による画面遷移を行いつつ、カウンターの値を次の画面に渡して表示する例を見ていきます。"}]},{"anchor":"RouteStore-と-SendRouteEnvironment","level":2,"type":"heading","text":"RouteStore と SendRouteEnvironment"},{"type":"paragraph","inlineContent":[{"type":"text","text":"まず、ビジネスロジックとなる "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" 、 "},{"type":"codeVoice","code":"State"},{"type":"text","text":" 、 "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を定義します。"}]},{"type":"codeListing","syntax":"swift","code":["import ActomatonUI","","\/\/ 入力アクション","enum Action: Sendable {","    case increment","    case push \/\/ 画面遷移","}","","\/\/ 状態","struct State: Equatable, Sendable {","    var count: Int = 0","}","","\/\/ 外部環境からの副作用の依存注入は今回必要ないので、Void 。","typealias _Environment = Void","","\/\/ 状態遷移関数","let reducer: Reducer<Action, State, _Environment>","reducer = Reducer { action, state, environment in","    switch action {","    case .increment:","        state.count += 1","        return Effect.empty","    case .push:","        \/\/ TODO: どのように画面遷移の副作用を入れる？","        return Effect.empty","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ここまでは "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/01-Counter"},{"type":"text","text":" の例とほぼ同じですが、 "},{"type":"codeVoice","code":"Action.push"},{"type":"text","text":" を受け取った後の "},{"type":"codeVoice","code":"case .push"},{"type":"text","text":" 分岐をどのように実装するのが良いのかが悩みの種です。"}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/Store"},{"type":"text","text":" のサブクラス) を使った設計では、従来の "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" 定義に "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/SendRouteEnvironment\/sendRoute"},{"type":"text","text":" 関数を加えるためのラッパーとして "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/SendRouteEnvironment"},{"type":"text","text":" を使います。"},{"type":"text","text":" "},{"type":"text","text":"これを使うと、次の形で "},{"type":"codeVoice","code":"environment.sendRoute()"},{"type":"text","text":" を呼び出すことができるようになります。"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ 外部環境からの副作用の依存注入は今回必要ないので、Void 。","\/\/ NOTE: この型は `SendRouteEnvironment` でラップされるので、","\/\/       名前の区別のため \"_\" を接頭辞につけておく。","typealias _Environment = Void","","\/\/ SendRouteEnvironment によるラップ。","\/\/ これを使うと `environment.sendRoute()` が実行できる。","typealias Environment = SendRouteEnvironment<_Environment, Route>","","\/\/ 外部ルーティング出力用データ","enum Route: Sendable {","    case push(count: Int)","}","","\/\/ 状態遷移関数","let reducer: Reducer<Action, State, Environment>","reducer = Reducer { action, state, environment in","    switch action {","    case .increment:","        state.count += 1","        return Effect.empty","    case .push:","        \/\/ `sendRoute` を使った副作用 (NOTE: Effect の中で呼ぶこと)","        return Effect.fireAndForget {","            environment.sendRoute(Route.push(count: state.count))","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"これでルーティング（外部出力）を含んだビジネスロジックが完成しました！"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"次に UIKit View にルーティングをつなぎこむ処理を見ていきます。"}]},{"anchor":"UI-route-ハンドリング","level":2,"type":"heading","text":"UI route ハンドリング"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Actomaton に限らず、 ViewModel がルーティング処理を兼ねる場合、その実装を "},{"type":"codeVoice","code":"UIViewController"},{"type":"text","text":" が内部で受け取って処理するよりも、外部から注入した方が ViewController 間が疎結合になり、より良い設計になります。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ここでは "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" を生成して "},{"type":"codeVoice","code":"UIViewController"},{"type":"text","text":" に注入しつつ、ルーティング処理をその外部から差し込める builder 関数を定義します。"}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","import ActomatonUI","","@MainActor","public enum Builder {","    \/\/ ViewController の builder 関数（ここでは UINavigationController までまとめて生成）","    static func buildNavigation() -> UIViewController {","        \/\/ RouteStore (ViewModel) の作成","        let store = RouteStore(","            state: State(),","            reducer: reducer,","            routeType: Route.self","        )","","        \/\/ ViewController の作成","        let vc = ViewController(store: store)","","        let navC = UINavigationController(rootViewController: vc)","","        \/\/ ルーティング処理","        store.subscribeRoutes { [weak navC] route in","            switch route {","            case let .push(count):","                \/\/ 次の画面の ViewController を生成し、navigation push する。","                \/\/ （次の画面用の NextBuilder の実装は省略）","                let vc = NextBuilder.build(count: count)","                navC?.pushViewController(vc, animated: true)","            }","        }","","        return navC","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ここで重要なメソッドが "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore\/subscribeRoutes(_:)"},{"type":"text","text":" です。"},{"type":"text","text":" "},{"type":"text","text":"この関数のクロージャー引数が、前述のビジネスロジックにおける出力値 "},{"type":"codeVoice","code":"Route.push"},{"type":"text","text":" を受け取り、"},{"type":"text","text":" "},{"type":"text","text":"その値を様々な形で解釈して次の画面へと遷移させます。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"まさに、このクロージャーが画面間の遷移を担うルーターとして存在することに相当します。"}]},{"anchor":"Next-Step","level":2,"type":"heading","text":"Next Step"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/04-HostingViewController"}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/actomatonui\/03-routestore"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/03-RouteStore","interfaceLanguage":"swift"},"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" を使って他の "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" にメッセージングする例"}],"kind":"article","metadata":{"roleHeading":"Article","title":"3. RouteStore によるルーティング","role":"article","modules":[{"name":"ActomatonUI"}]},"hierarchy":{"paths":[["doc:\/\/ActomatonUI\/documentation\/ActomatonUI"]]},"references":{"doc://ActomatonUI/documentation/ActomatonUI/RouteStore/subscribeRoutes(_:)":{"role":"symbol","title":"subscribeRoutes(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"subscribeRoutes"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Route","preciseIdentifier":"s:11ActomatonUI10RouteStoreC0C0q1_mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Subscribes "},{"type":"codeVoice","code":"routes"},{"type":"text","text":" until "},{"type":"codeVoice","code":"RouteStore"},{"type":"text","text":"’s lifetime."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore\/subscribeRoutes(_:)","kind":"symbol","type":"topic","url":"\/documentation\/actomatonui\/routestore\/subscriberoutes(_:)"},"doc://ActomatonUI/documentation/ActomatonUI/RouteStore":{"role":"symbol","title":"RouteStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouteStore"}],"abstract":[{"type":"codeVoice","code":"Store"},{"type":"text","text":" wrapper that also outputs "},{"type":"codeVoice","code":"routes"},{"type":"text","text":", mainly used for UIKit’s navigation handling."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouteStore"}],"url":"\/documentation\/actomatonui\/routestore"},"doc://ActomatonUI/documentation/ActomatonUI/01-Counter":{"role":"article","title":"1. シンプルなカウンター","abstract":[{"type":"codeVoice","code":"increment"},{"type":"text","text":" と "},{"type":"codeVoice","code":"decrement"},{"type":"text","text":" を行うカウンターの例"}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/01-Counter","kind":"article","type":"topic","url":"\/documentation\/actomatonui\/01-counter"},"doc://ActomatonUI/documentation/ActomatonUI":{"role":"collection","title":"ActomatonUI","abstract":[{"type":"text","text":"Swift Concurrency (async\/await、Structured Concurrency、Actor) を使った、状態と副作用の管理のためのフレームワーク。"}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI","kind":"symbol","type":"topic","url":"\/documentation\/actomatonui"},"doc://ActomatonUI/documentation/ActomatonUI/SendRouteEnvironment/sendRoute":{"role":"symbol","title":"sendRoute","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"sendRoute"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Route","preciseIdentifier":"s:11ActomatonUI20SendRouteEnvironmentV0D0q_mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"}],"abstract":[],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/SendRouteEnvironment\/sendRoute","kind":"symbol","type":"topic","url":"\/documentation\/actomatonui\/sendrouteenvironment\/sendroute"},"doc://ActomatonUI/documentation/ActomatonUI/HostingViewController":{"role":"symbol","title":"HostingViewController","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HostingViewController"}],"abstract":[{"type":"text","text":"SwiftUI "},{"type":"codeVoice","code":"View"},{"type":"text","text":" & "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/Store"},{"type":"text","text":" wrapper view controller that holds "},{"type":"codeVoice","code":"UIHostingController"},{"type":"text","text":"."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/HostingViewController","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HostingViewController"}],"url":"\/documentation\/actomatonui\/hostingviewcontroller"},"doc://ActomatonUI/documentation/ActomatonUI/04-HostingViewController":{"role":"article","title":"4. HostingViewController","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/HostingViewController"},{"type":"text","text":" を使った "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" と SwiftUI の連携"}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/04-HostingViewController","kind":"article","type":"topic","url":"\/documentation\/actomatonui\/04-hostingviewcontroller"},"doc://ActomatonUI/documentation/ActomatonUI/SendRouteEnvironment":{"role":"symbol","title":"SendRouteEnvironment","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SendRouteEnvironment"}],"abstract":[{"type":"text","text":"Wrapper of original "},{"type":"codeVoice","code":"environment"},{"type":"text","text":" with attaching "},{"type":"codeVoice","code":"sendRoute"},{"type":"text","text":"."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/SendRouteEnvironment","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SendRouteEnvironment"}],"url":"\/documentation\/actomatonui\/sendrouteenvironment"},"doc://ActomatonUI/documentation/ActomatonUI/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"codeVoice","code":"MainActomaton"},{"type":"text","text":"-erased wrapper which can "},{"type":"codeVoice","code":"map(state:)-1wcms"},{"type":"text","text":" into sub-store."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/actomatonui\/store"}}}