{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore"},{"type":"text","text":" は "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/Store"},{"type":"text","text":" ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" の親クラス) から生成される SwiftUI view binding 用のクラスです。"},{"type":"text","text":" "},{"type":"text","text":"これまでの章では、"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/WithViewStore"},{"type":"text","text":" を使って "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/Store"},{"type":"text","text":" から "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore"},{"type":"text","text":" に変換"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"SwiftUI.View.body"},{"type":"text","text":" の中で "},{"type":"codeVoice","code":"viewStore.state"},{"type":"text","text":" を読み取って UI 表示に反映"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"という流れで簡単に説明しましたが、この章では "},{"type":"strong","inlineContent":[{"type":"text","text":"UI の状態が変化したときの Binding"}]},{"type":"text","text":" について見ていきます。"}]},{"anchor":"ViewStore-による状態-Binding","level":2,"type":"heading","text":"ViewStore による状態 Binding"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore"},{"type":"text","text":" から状態 "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":" を作る方法は、主に次の 2 通りです："}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"状態の「間接」更新 "},{"type":"strong","inlineContent":[{"type":"text","text":"（推奨）"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore\/binding(get:onChange:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"get"},{"type":"text","text":" で状態を read 、"},{"type":"codeVoice","code":"onChange"},{"type":"text","text":" で変更した状態を直接 "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/Store"},{"type":"text","text":" に送る代わりに "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" に変換して送信する"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"状態の「直接」更新"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore\/directBinding"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"viewStore.state"},{"type":"text","text":" の状態を直接 read\/write する "},{"type":"codeVoice","code":"Binding"}]}]}]}]}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"状態の直接更新について、 "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore"},{"type":"text","text":" を "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" で監視する場合、"},{"type":"text","text":" "},{"type":"codeVoice","code":"$viewStore.state"},{"type":"text","text":" を使った "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":" の取得が考えられますが、"},{"type":"text","text":" "},{"type":"codeVoice","code":"viewStore.state"},{"type":"text","text":" は read-only のため使用できません。代わりに "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore\/directBinding"},{"type":"text","text":" を使います。"}]}]},{"anchor":"@Binding-(状態の直接更新)-を-store.send-(間接更新)-に変換する","level":3,"type":"heading","text":"@Binding (状態の直接更新) を store.send (間接更新) に変換する"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Actomaton におけるビジネスロジックの基本的な設計は "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" が担います。"},{"type":"text","text":" "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" は状態遷移関数のことで、 "},{"type":"strong","inlineContent":[{"type":"text","text":"状態を直接更新する代わりにアクションを介して「間接的に」更新する (Elm Architecture)"}]},{"type":"text","text":" というのが特徴です。"},{"type":"text","text":" "},{"type":"text","text":"この動作は、ステートマシン全般の基本的な振る舞いになりますが、残念ながら SwiftUI の世界では"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Binding"},{"type":"text","text":" が「状態の直接更新」を中心とする設計になっているため、 "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を介して状態を間接更新することを難しくしています。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ここで "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を介した状態の間接更新のメリットを挙げておきましょう。"},{"type":"text","text":" "},{"type":"text","text":"これまでの例題で見てきた通り、"},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を使った場合は状態をただ単に変更するだけでなく、"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"トリガー（アクション）をフックポイントとして副作用を追加できる"}]},{"type":"text","text":" という点にあります。"},{"type":"text","text":" "},{"type":"text","text":"例えば、状態更新をコンソールログに表示したり、分析ログを外部送信したい場合などに便利です。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"このように、 Actomaton の "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" には大きな利点がありますが、 SwiftUI 上でその機能を享受するためには、"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI の "},{"type":"codeVoice","code":"@Binding"},{"type":"text","text":" (状態の直接更新) を "},{"type":"codeVoice","code":"store.send"},{"type":"text","text":" (アクションを送って間接更新) に変換する"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"という仕組みが必要になります。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"その具体的な方法として、"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore"},{"type":"text","text":" の "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore\/binding(get:onChange:)"},{"type":"text","text":" を使います。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"例えば、テキストフィールドの入力状態をバインディングする例を考えてみます："}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","","@MainActor","struct SearchView: View {","    @Binding \/\/ または @State","    private var text: String","","    ...","","    var body: some View {","        TextField(\"Search\", text: $text)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Actomaton ではこれを次のように書くことができます："}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","import ActomatonUI","","enum Action {","    case updateText(String) \/\/ 入力フック用アクション","}","","struct State {","    var text: String","}","","typealias Environment = Void","","let reducer = Reducer { action, state, environment in","    switch action {","    case let .updateText(text):","        state.text = text","","        \/\/ フックして副作用を追加","        return Effect.fireAndForget { print(\"Updated to \\(text)\") }","    }","}","","@MainActor","struct SearchView: View {","    private let store: Store<Action, State, Environment>","","    init(store: Store<Action, State, Environment>) {","        self.store = store","    }","","    var body: some View {","        WithViewStore(self.store) { viewStore in","            \/\/ NOTE: `viewStore.binding` は、状態 Binding のセッターを `onChange` アクションに変換して `store.send` する","            TextField(\"Search\", text: viewStore.binding(","                get: { $0.text },","                onChange: { Action.updateText($0) }","            )","        }","    }","}","","let store: RouteStore<Action, State, Environment, Route> = .init(","    state: State(),","    reducer: reducer",")","","let searchView = SearchView(store: store)","..."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"おおっと、コードの量が一気に増えてしまいました！"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI View の中で "},{"type":"codeVoice","code":"store.binding(get:onChange:)"},{"type":"text","text":" が使われているだけでなく、"},{"type":"text","text":" "},{"type":"codeVoice","code":"Action.updateText"},{"type":"text","text":" を書いたり、 "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を定義したり、一見するとコードが複雑になってしまっているように見えますね。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"しかし、 "},{"type":"strong","inlineContent":[{"type":"text","text":"開発者が適切な設計のもと、状態と副作用をきちんと管理するためには、アクションによる状態の間接操作が不可欠です。"}]},{"type":"text","text":" "},{"type":"text","text":"これらの冗長化を許容しないまま、追加の副作用を記述することは容易なことではありません。"}]},{"type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"Elm Architecture が状態管理のフレームワークとして優れている点は、 "},{"type":"strong","inlineContent":[{"type":"text","text":"「状態操作の一般化」"},{"type":"text","text":" "},{"type":"text","text":"（状態の get \/ set 直接更新から get \/ reducer 間接更新への一般化）"}]},{"type":"text","text":" にあります。"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"とはいえ、もし完璧な状態管理・副作用管理を求めていない場合は、上記のような余計なコードを省きたいケースもあるでしょう。"},{"type":"text","text":" "},{"type":"text","text":"その場合は、 "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore\/directBinding"},{"type":"text","text":" (直接更新 "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":") を使って、冗長化を避けることが可能です。"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","struct SearchView: View {","    private let store: Store<Action, State, Environment>","","    init(store: Store<Action, State, Environment>) {","        self.store = store","    }","","    var body: some View {","        WithViewStore(self.store) { viewStore in","            \/\/ NOTE: `viewStore.directBinding` (mutable な state) を使って直接更新","            TextField(\"Search\", text: viewStore.directBinding.text)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ただしこの場合、 "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" が無くなってしまっているので、"},{"type":"codeVoice","code":"store"},{"type":"text","text":" の "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" が呼ばれない点に注意してください。"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" が無い場合、その呼び出しに紐づく「追加の副作用」を実行することもできません。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"このように、 "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore\/binding(get:onChange:)"},{"type":"text","text":" (間接更新 "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":") と "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore\/directBinding"},{"type":"text","text":" (直接更新 "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":") には"},{"type":"text","text":" "},{"type":"text","text":"一長一短があります。"},{"type":"text","text":" "},{"type":"text","text":"基本的には「間接更新」(Elm Architecture) を中心としながら適材適所で使い分け、理想の状態・副作用管理を目指しましょう！"}]},{"anchor":"Next-Step","level":2,"type":"heading","text":"Next Step"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore"},{"type":"text","text":" を使ったアプリ開発のチュートリアルは以上です 🎉"}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/actomatonui\/05-viewstore"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/05-ViewStore","interfaceLanguage":"swift"},"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore"},{"type":"text","text":" を使った SwiftUI との連携"}],"kind":"article","metadata":{"roleHeading":"Article","title":"5. ViewStore","role":"article","modules":[{"name":"ActomatonUI"}]},"hierarchy":{"paths":[["doc:\/\/ActomatonUI\/documentation\/ActomatonUI"]]},"references":{"doc://ActomatonUI/documentation/ActomatonUI/ViewStore/binding(get:onChange:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"binding(get:onChange:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"binding"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"SubState"},{"kind":"text","text":">("},{"kind":"externalParam","text":"get"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:11ActomatonUI9ViewStoreC5Stateq_mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SubState","preciseIdentifier":"s:11ActomatonUI9ViewStoreC7binding3get8onChange05SwiftB07BindingVyqd__Gqd__q_c_xSgqd__ctlF8SubStateL_qd__mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onChange"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"SubState","preciseIdentifier":"s:11ActomatonUI9ViewStoreC7binding3get8onChange05SwiftB07BindingVyqd__Gqd__q_c_xSgqd__ctlF8SubStateL_qd__mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:11ActomatonUI9ViewStoreC6Actionxmfp"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"SubState","preciseIdentifier":"s:11ActomatonUI9ViewStoreC7binding3get8onChange05SwiftB07BindingVyqd__Gqd__q_c_xSgqd__ctlF8SubStateL_qd__mfp"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Indirect state-to-action conversion binding to create "},{"type":"codeVoice","code":"Binding<SubState>"},{"type":"text","text":"."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore\/binding(get:onChange:)","kind":"symbol","type":"topic","url":"\/documentation\/actomatonui\/viewstore\/binding(get:onchange:)"},"doc://ActomatonUI/documentation/ActomatonUI/ViewStore":{"role":"symbol","title":"ViewStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/Store"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" proxy type that can create direct (state-to-state) & indirect (state-to-action) "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":"s."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"url":"\/documentation\/actomatonui\/viewstore"},"doc://ActomatonUI/documentation/ActomatonUI/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"codeVoice","code":"MainActomaton"},{"type":"text","text":"-erased wrapper which can "},{"type":"codeVoice","code":"map(state:)-1wcms"},{"type":"text","text":" into sub-store."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/actomatonui\/store"},"doc://ActomatonUI/documentation/ActomatonUI/ViewStore/directBinding":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"directBinding","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"directBinding"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:11ActomatonUI9ViewStoreC5Stateq_mfp"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Direct 2-way state binding for SwiftUI without sending user-defined action."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore\/directBinding","kind":"symbol","type":"topic","url":"\/documentation\/actomatonui\/viewstore\/directbinding"},"doc://ActomatonUI/documentation/ActomatonUI/WithViewStore":{"role":"symbol","title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"Observable "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/ViewStore"},{"type":"text","text":" holder view that is created from unobservable "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/Store"},{"type":"text","text":"."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/WithViewStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"url":"\/documentation\/actomatonui\/withviewstore"},"doc://ActomatonUI/documentation/ActomatonUI":{"role":"collection","title":"ActomatonUI","abstract":[{"type":"text","text":"Swift Concurrency (async\/await、Structured Concurrency、Actor) を使った、状態と副作用の管理のためのフレームワーク。"}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI","kind":"symbol","type":"topic","url":"\/documentation\/actomatonui"},"doc://ActomatonUI/documentation/ActomatonUI/RouteStore":{"role":"symbol","title":"RouteStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouteStore"}],"abstract":[{"type":"codeVoice","code":"Store"},{"type":"text","text":" wrapper that also outputs "},{"type":"codeVoice","code":"routes"},{"type":"text","text":", mainly used for UIKit’s navigation handling."}],"identifier":"doc:\/\/ActomatonUI\/documentation\/ActomatonUI\/RouteStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouteStore"}],"url":"\/documentation\/actomatonui\/routestore"}}}