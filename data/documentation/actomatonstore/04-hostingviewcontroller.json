{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/03-RouteStore"},{"type":"text","text":" では、 UIKit を使った "},{"type":"codeVoice","code":"ViewController"},{"type":"text","text":" 画面を仮定して builder とルーティングを設計しましたが、"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI の "},{"type":"codeVoice","code":"UIHostingController"},{"type":"text","text":" を使った場合でも同様の方法で作ることができます。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"その際には ActomatonStore モジュールが提供する "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/HostingViewController"},{"type":"text","text":" の利用を検討してみて下さい。"}]},{"anchor":"HostingViewController-(for-SwiftUI)","level":2,"type":"heading","text":"HostingViewController (for SwiftUI)"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/HostingViewController"},{"type":"text","text":" はイニシャライザとして "},{"type":"codeVoice","code":"HostingViewController\/init(store:makeView:)-6i0iw"},{"type":"text","text":" を持ち、"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/03-RouteStore"},{"type":"text","text":" の UIKit の例と同じく "},{"type":"codeVoice","code":"store"},{"type":"text","text":" を第 1 引数に受け取ることができます。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ここで、第 2 引数は "},{"type":"codeVoice","code":"makeView: (Store<Action, State, Environment>.Proxy) -> some View"},{"type":"text","text":" という型を持っています。これは、"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"（RouteStore 内部で）第 1 引数の "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store"},{"type":"text","text":" を "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct"},{"type":"text","text":" に変えてクロージャーの引数に提供するので、開発者はそれを使って SwiftUI View を組み立てて下さい"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"という意味です。"}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct"},{"type":"text","text":" については後述するとして、まずは "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/HostingViewController"},{"type":"text","text":" の実際の使用例を見てみましょう。"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","import ActomatonStore","","\/\/ SwiftUI View の例","@MainActor","struct ContentView: View {","    \/\/ Store.Proxy を保持 (NOTE: @ObservedObject 等は不要)","    private let store: Store<Action, State, Environment>.Proxy","","    init(store: Store<Action, State, Environment>.Proxy) {","        self.store = store","    }","","    var body: some View {","        HStack {","            Text(\"\\(store.state.count)\")","","            Button(action: { store.send(.increment) }) {","                Image(systemName: \"plus.circle\")","            }","","            Button(action: { store.send(.push) }) {","                Text(\"Navigation Push\")","            }","        }","    }","}","","enum SwiftUIBuilder {","    static func buildNavigation() -> UIViewController {","        \/\/ RouteStore (ViewModel) の作成（前ページと同じ）","        let store = RouteStore(","            state: State(),","            reducer: reducer,","            routeType: Route.self","        )","","        \/\/ HostingViewController を使ったViewController の作成","        let vc = HostingViewController(store: store, makeView: ContentView.init)","","        let navC = UINavigationController(rootViewController: vc)","","        \/\/ ルーティング処理（前ページと同じ）","        store.subscribeRoutes { [weak navC] route in","            switch route {","            case let .push(count):","                let vc = NextBuilder.build(count: count)","                navC?.pushViewController(vc, animated: true)","            }","        }","","        return navC","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HostingViewController"},{"type":"text","text":" 初期化時の "},{"type":"codeVoice","code":"makeView"},{"type":"text","text":" に "},{"type":"codeVoice","code":"ContentView"},{"type":"text","text":" (SwiftUI View) のイニシャライザを渡します。"},{"type":"text","text":" "},{"type":"text","text":"すると、開発者は "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct"},{"type":"text","text":" を ViewModel と見立てて、SwiftUI View 内部の開発のみに専念することができます。"}]},{"anchor":"Store.Proxy-について","level":2,"type":"heading","text":"Store.Proxy について"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"store-proxy.png"}]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct"},{"type":"text","text":" は "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store"},{"type":"text","text":" ("},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" の親クラス) から生成される SwiftUI view binding 用の Sub-Store クラスです。"},{"type":"text","text":" "},{"type":"text","text":"主な用途として、"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI "},{"type":"codeVoice","code":"@Binding"},{"type":"text","text":" に便利なヘルパーメソッドを提供する"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"関数型プログラミングの手法を使って、 1 つの "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store"},{"type":"text","text":" のみを Single Source of Truth として扱い、 Sub-Store  に分解して個々の画面を表現する（上図参照、ただし上級者向け）"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"があり、ここでは 1. に絞って使い方を解説します。"}]},{"anchor":"@Binding-(状態の直接更新)-を-store.send-(間接更新)-に変換する","level":3,"type":"heading","text":"@Binding (状態の直接更新) を store.send (間接更新) に変換する"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Actomaton におけるビジネスロジックの基本的な設計は "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" が担います。"},{"type":"text","text":" "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" は状態遷移関数のことで、 "},{"type":"strong","inlineContent":[{"type":"text","text":"状態を直接更新する代わりにアクションを介して「間接的に」更新する"}]},{"type":"text","text":" というのが特徴です。"},{"type":"text","text":" "},{"type":"text","text":"この動作は、ステートマシン全般の基本的な振る舞いになりますが、残念ながら SwiftUI の世界では"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Binding"},{"type":"text","text":" が「状態の直接更新」を中心とする設計になっているため、 "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を介して状態を間接更新することを難しくしています。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ここで "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を介した状態の間接更新のメリットを挙げておきましょう。"},{"type":"text","text":" "},{"type":"text","text":"これまでの例題で見てきた通り、"},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を使った場合は状態をただ単に変更するだけでなく、"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"トリガー（アクション）をフックポイントとして副作用を追加できる"}]},{"type":"text","text":" という点にあります。"},{"type":"text","text":" "},{"type":"text","text":"例えば、状態更新をコンソールログに表示したり、分析ログを外部送信したい場合などに便利です。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"このように、 Actomaton の "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" には大きな利点がありますが、 SwiftUI 上でその機能を享受するためには、"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI の "},{"type":"codeVoice","code":"@Binding"},{"type":"text","text":" (状態の直接更新) を "},{"type":"codeVoice","code":"store.send"},{"type":"text","text":" (アクションを送って間接更新) に変換する"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"という仕組みが必要になります。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"その具体的な方法として、"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct"},{"type":"text","text":" の "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct\/stateBinding(get:onChange:)"},{"type":"text","text":" を使います。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"例えば、テキストフィールドの入力状態をバインディングする例を考えてみます："}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","","@MainActor","struct SearchView: View {","    @Binding \/\/ または @State","    private var text: String","","    ...","","    var body: some View {","        TextField(\"Search\", text: $text)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Actomaton ではこれを次のように書くことができます："}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","import ActomatonStore","","enum Action {","    case updateText(String) \/\/ 入力フック用アクション","}","","struct State {","    var text: String","}","","typealias Environment = Void","","let reducer = Reducer { action, state, environment in","    switch action {","    case let .updateText(text):","        state.text = text","","        \/\/ フックして副作用を追加","        return Effect.fireAndForget { print(\"Updated to \\(text)\") }","    }","}","","\/\/ NOTE: HostingViewController を使うと Store.Proxy 化する","let store: RouteStore<Action, State, Environment, Route> = .init(","    state: State(),","    reducer: reducer",")","","@MainActor","struct SearchView: View {","    private let store: Store<Action, State, Environment>.Proxy","","    init(store: Store<Action, State, Environment>.Proxy) {","        self.store = store","    }","","    var body: some View {","        \/\/ NOTE: store.stateBinding は、状態 @Binding のセッターを onChange に変換して store.send する","        TextField(\"Search\", text: store.stateBinding(","            get: { $0.text },","            onChange: { Action.updateText($0) }","        )","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"おおっと、コードの量が一気に増えてしまいました！"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI View の中で "},{"type":"codeVoice","code":"store.stateBinding"},{"type":"text","text":" が使われているだけでなく、"},{"type":"text","text":" "},{"type":"codeVoice","code":"Action.updateText"},{"type":"text","text":" を書いたり、 "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" を定義したり、一見するとコードが複雑になってしまっているように見えますね。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"しかし、 "},{"type":"strong","inlineContent":[{"type":"text","text":"開発者が適切な設計のもと、状態と副作用をきちんと管理するためには、アクションによる状態の間接操作が不可欠です。"}]},{"type":"text","text":" "},{"type":"text","text":"これらの冗長化を許容しないまま、追加の副作用を記述することは容易なことではありません。"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"とはいえ、もし完璧な状態管理・副作用管理を求めていない場合は、上記のような余計なコードを省きたいケースもあるでしょう。"},{"type":"text","text":" "},{"type":"text","text":"その場合は、 "},{"type":"codeVoice","code":"Store.Proxy.$state"},{"type":"text","text":" (直接 "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":") を使って、冗長化を避けることが可能です。"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","struct SearchView: View {","    private let store: Store<Action, State, Environment>.Proxy","","    init(store: Store<Action, State, Environment>.Proxy) {","        self.store = store","    }","","    var body: some View {","        \/\/ NOTE: store.$state (生の state) を使って直接更新","        TextField(\"Search\", text: store.$state.text","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct\/stateBinding(get:onChange:)"},{"type":"text","text":" と "},{"type":"codeVoice","code":"Store.Proxy.$state"},{"type":"text","text":" (直接 "},{"type":"codeVoice","code":"Binding"},{"type":"text","text":") を適材適所で使い分けながら、理想の状態・副作用管理を目指しましょう！"}]},{"anchor":"Next-Step","level":2,"type":"heading","text":"Next Step"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" を使ったアプリ開発のチュートリアルは以上です 🎉"}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/actomatonstore\/04-hostingviewcontroller"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/04-HostingViewController","interfaceLanguage":"swift"},"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/HostingViewController"},{"type":"text","text":" を使った "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" と SwiftUI の連携"}],"kind":"article","metadata":{"roleHeading":"Article","title":"4. HostingViewController","role":"article","modules":[{"name":"ActomatonStore"}]},"hierarchy":{"paths":[["doc:\/\/ActomatonStore\/documentation\/ActomatonStore"]]},"references":{"doc://ActomatonStore/documentation/ActomatonStore/HostingViewController":{"role":"symbol","title":"HostingViewController","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HostingViewController"}],"abstract":[{"type":"text","text":"SwiftUI "},{"type":"codeVoice","code":"View"},{"type":"text","text":" & "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store"},{"type":"text","text":" wrapper view controller that holds "},{"type":"codeVoice","code":"UIHostingController"},{"type":"text","text":"."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/HostingViewController","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HostingViewController"}],"url":"\/documentation\/actomatonstore\/hostingviewcontroller"},"doc://ActomatonStore/documentation/ActomatonStore/Store/Proxy-swift.struct":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", "},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"Store.Proxy","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Proxy"}],"abstract":[{"type":"text","text":"Lightweight "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" proxy that is state-bindable and action-sendable without duplicating internal state."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Proxy"}],"url":"\/documentation\/actomatonstore\/store\/proxy-swift.struct"},"doc://ActomatonStore/documentation/ActomatonStore/RouteStore":{"role":"symbol","title":"RouteStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouteStore"}],"abstract":[{"type":"text","text":"Subclass of "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" that also outputs "},{"type":"codeVoice","code":"routes"},{"type":"text","text":", mainly used for UIKit’s navigation handling"},{"type":"text","text":" "},{"type":"text","text":"without using "},{"type":"codeVoice","code":"State"},{"type":"text","text":" as a single source of truth."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouteStore"}],"url":"\/documentation\/actomatonstore\/routestore"},"doc://ActomatonStore/documentation/ActomatonStore/Store/Proxy-swift.struct/stateBinding(get:onChange:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", "},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"stateBinding(get:onChange:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"stateBinding"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"SubState"},{"kind":"text","text":">("},{"kind":"externalParam","text":"get"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:14ActomatonStore0B0C5ProxyV5Stateq_mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SubState","preciseIdentifier":"s:14ActomatonStore0B0C5ProxyV12stateBinding3get8onChange7SwiftUI0E0Vyqd__Gqd__q_c_xSgqd__ctlF8SubStateL_qd__mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"onChange"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"SubState","preciseIdentifier":"s:14ActomatonStore0B0C5ProxyV12stateBinding3get8onChange7SwiftUI0E0Vyqd__Gqd__q_c_xSgqd__ctlF8SubStateL_qd__mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:14ActomatonStore0B0C5ProxyV6Actionxmfp"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"SubState","preciseIdentifier":"s:14ActomatonStore0B0C5ProxyV12stateBinding3get8onChange7SwiftUI0E0Vyqd__Gqd__q_c_xSgqd__ctlF8SubStateL_qd__mfp"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Indirect state-to-action conversion binding to create "},{"type":"codeVoice","code":"Binding<SubState>"},{"type":"text","text":"."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct\/stateBinding(get:onChange:)","kind":"symbol","type":"topic","url":"\/documentation\/actomatonstore\/store\/proxy-swift.struct\/statebinding(get:onchange:)"},"doc://ActomatonStore/documentation/ActomatonStore/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"Store of "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" optimized for SwiftUI’s 2-way binding."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/actomatonstore\/store"},"doc://ActomatonStore/documentation/ActomatonStore":{"role":"collection","title":"ActomatonStore","abstract":[{"type":"text","text":"Swift Concurrency (async\/await、Structured Concurrency、Actor) を使った、状態と副作用の管理のためのフレームワーク。"}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore","kind":"symbol","type":"topic","url":"\/documentation\/actomatonstore"},"doc://ActomatonStore/documentation/ActomatonStore/03-RouteStore":{"role":"article","title":"3. RouteStore によるルーティング","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" を使って他の "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" にメッセージングする例"}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/03-RouteStore","kind":"article","type":"topic","url":"\/documentation\/actomatonstore\/03-routestore"},"store-proxy.png":{"alt":"store-proxy","type":"image","identifier":"store-proxy.png","variants":[{"url":"\/images\/store-proxy.png","traits":["1x","light"]}]}}}