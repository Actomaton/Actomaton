{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Actomaton"}]},{"type":"text","text":" は Swift Concurrency を使った "},{"type":"strong","inlineContent":[{"type":"text","text":"状態と副作用の管理のためのフレームワーク"}]},{"type":"text","text":" です。"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/elm-lang.org\/"},{"type":"text","text":" や "},{"type":"reference","isActive":true,"identifier":"https:\/\/redux.js.org\/"},{"type":"text","text":"、"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture"},{"type":"text","text":" などを参考に、Swift Concurrency を用いた高度な副作用管理システムを備えています。"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Repository: "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/Actomaton\/Actomaton"}]}]}]},{"anchor":"Actomaton-(親モジュール)","level":3,"type":"heading","text":"Actomaton (親モジュール)"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Actomaton"}]},{"type":"text","text":" は Actor を用いた状態管理のコアモジュールで、Linux を含めた各種プラットフォーム上で動作します。"},{"type":"text","text":" "},{"type":"text","text":"大きく分けて、次の5つの型ないしその実装を開発者が定義することで、アプリの振る舞い（ビジネスロジック）を決定します。"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Action (入力)"}]},{"type":"text","text":":"},{"type":"text","text":" "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" を用いた「メッセージ」を Actomaton に送り、Reducer（ビジネスロジック）を実行する"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"State (状態)"}]},{"type":"text","text":":"},{"type":"text","text":" "},{"type":"text","text":"アプリの全体、あるいは部分的なドメインに特化した「状態」。"},{"type":"text","text":" "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" を受信後に Reducer によって状態変更が行われる。この状態を使って、ユーザーインターフェースなどシステム外部に対して表現を行う。"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Reducer (状態遷移関数)"}]},{"type":"text","text":":"},{"type":"text","text":" "},{"type":"text","text":"アプリの全体、あるいは部分的なドメインに特化した「ビジネスロジック」。"},{"type":"text","text":" "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" を入力として受け取り、"},{"type":"codeVoice","code":"State"},{"type":"text","text":" を更新した後、 "},{"type":"codeVoice","code":"Effect"},{"type":"text","text":" を出力として発生する。"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Effect (副作用)"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" 受信後の Reducer の実行で発生する「副作用」"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"副作用実行の後、次のアクションを1回送信する "},{"type":"codeVoice","code":"async"},{"type":"text","text":" 関数方式と、複数回のアクションを連続送信できる "},{"type":"codeVoice","code":"AsyncStream"},{"type":"text","text":" 方式の2パターン"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectID"},{"type":"text","text":" を使った（手動）キャンセル処理"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"EffectQueue"},{"type":"text","text":" を使った副作用のキュー管理（自動キャンセル・自動待機など）"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Environment (外部環境)"}]},{"type":"text","text":": 実行する副作用の差し替え（モック化）を可能にする「外部環境」。これにより Actomaton は依存注入コンテナとしても機能する。"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"これらの単純なデータ構造をアプリの設計図として、"},{"type":"strong","inlineContent":[{"type":"text","text":"actor Actomaton"}]},{"type":"text","text":" を作成することができます。"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" は状態機械を使った計算モデルの１つです。その使い方として、"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"1つの "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" のみを用いてアプリ全体の状態を管理（"},{"type":"strong","inlineContent":[{"type":"text","text":"関数型プログラミング方式"}]},{"type":"text","text":"）"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"各ドメインごとに "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" を作成して複数間でメッセージパッシングする設計（"},{"type":"strong","inlineContent":[{"type":"text","text":"オブジェクト指向プログラミング方式"}]},{"type":"text","text":"）"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"など、様々な設計指針に合わせて柔軟に開発することができます。"}]},{"type":"aside","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"オブジェクト指向プログラミング方式"}]},{"type":"text","text":" では、 "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" を UI 開発における「ViewModel」に見立てて設計することができます。初級〜中級者向け。"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"関数型プログラミング方式"}]},{"type":"text","text":" では、"},{"type":"codeVoice","code":"WritableKeyPath"},{"type":"text","text":" と "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/swift-case-paths"},{"type":"text","text":" を用いた"},{"type":"text","text":" "},{"type":"text","text":"Optics (Lens) と呼ばれる手法を使って "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" の代わりに "},{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" をドメインごとに分解し、アプリ全体へと合成することができます。上級者向け。"}]}]}]}]},{"anchor":"ActomatonStore","level":3,"type":"heading","text":"ActomatonStore"},{"type":"paragraph","inlineContent":[{"type":"text","text":"この "},{"type":"strong","inlineContent":[{"type":"text","text":"ActomatonStore"}]},{"type":"text","text":" モジュールでは、上述の Actomaton を SwiftUI \/ UIKit \/ AppKit 向けにラップした"},{"type":"text","text":" "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" と UI binding に便利な各種機能を提供します。"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Store (共通)"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store"}]},{"type":"text","text":": "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" をメインスレッド化した薄いラッパー"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI binding + 関数型プログラミング用"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct"}]},{"type":"text","text":": SwiftUI "},{"type":"codeVoice","code":"@Binding"},{"type":"text","text":" に特化した "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store"},{"type":"text","text":" の部分構造 (Sub-Store)"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"UIKit binding + オブジェクト指向プログラミング用"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"}]},{"type":"text","text":": "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store"},{"type":"text","text":" のサブクラスで、追加の "},{"type":"codeVoice","code":"Route"},{"type":"text","text":" 外部出力（副作用）を持つ"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MVVMにおける ViewModel と同等の機能を提供する一方、Sub-Store に分解できない"}]}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"この中で簡単に始められるのは、従来の MVVM 構成に最も近い 3. の "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" です。"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" を用いたチュートリアル (for UIKit & SwiftUI) については、下記のリンクをご参照下さい。"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/OOP-Tutorial"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"2, 3, 4 を使った実際のサンプルアプリについては、次の SwiftUI \/ UIKit Gallery アプリをご参照下さい。"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/Actomaton\/Actomaton-Gallery"}]}]}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/actomatonstore"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Swift Concurrency (async\/await、Structured Concurrency、Actor) を使った、状態と副作用の管理のためのフレームワーク。"}],"kind":"symbol","metadata":{"roleHeading":"Framework","externalID":"ActomatonStore","title":"ActomatonStore","symbolKind":"module","role":"collection","modules":[{"name":"ActomatonStore"}]},"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Getting Started","identifiers":["doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/OOP-Tutorial"]},{"title":"Esssentials","identifiers":["doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store"]},{"title":"For SwiftUI binding + Functional Programmers","identifiers":["doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct"]},{"title":"For UIKit binding + Object-Oriented Programmers","identifiers":["doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore","doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/SendRouteEnvironment"]},{"title":"For UIKit binding + Functional Programmers","identifiers":["doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/ObservableProxy-swift.class"]},{"title":"UIKit View Hosting Helper","identifiers":["doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/HostingViewController"]},{"title":"Articles","identifiers":["doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/03-RouteStore","doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/01-Counter","doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/04-HostingViewController","doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/02-LoginLogout"],"generated":true},{"title":"Structures","identifiers":["doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/StoreConfiguration"]}],"references":{"doc://ActomatonStore/documentation/ActomatonStore/Store/Proxy-swift.struct":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", "},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"Store.Proxy","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Proxy"}],"abstract":[{"type":"text","text":"Lightweight "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" proxy that is state-bindable and action-sendable without duplicating internal state."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/Proxy-swift.struct","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Proxy"}],"url":"\/documentation\/actomatonstore\/store\/proxy-swift.struct"},"doc://ActomatonStore/documentation/ActomatonStore/HostingViewController":{"role":"symbol","title":"HostingViewController","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HostingViewController"}],"abstract":[{"type":"text","text":"SwiftUI "},{"type":"codeVoice","code":"View"},{"type":"text","text":" & "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store"},{"type":"text","text":" wrapper view controller that holds "},{"type":"codeVoice","code":"UIHostingController"},{"type":"text","text":"."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/HostingViewController","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HostingViewController"}],"url":"\/documentation\/actomatonstore\/hostingviewcontroller"},"https://github.com/pointfreeco/swift-case-paths":{"title":"CasePath","titleInlineContent":[{"type":"codeVoice","code":"CasePath"}],"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-case-paths","url":"https:\/\/github.com\/pointfreeco\/swift-case-paths"},"doc://ActomatonStore/documentation/ActomatonStore/02-LoginLogout":{"role":"article","title":"2. 認証フローの状態管理・副作用管理","abstract":[{"type":"text","text":"認証フローで行われる複雑な状態管理とその副作用管理を扱う例"}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/02-LoginLogout","kind":"article","type":"topic","url":"\/documentation\/actomatonstore\/02-loginlogout"},"doc://ActomatonStore/documentation/ActomatonStore/01-Counter":{"role":"article","title":"1. シンプルなカウンター","abstract":[{"type":"codeVoice","code":"increment"},{"type":"text","text":" と "},{"type":"codeVoice","code":"decrement"},{"type":"text","text":" を行うカウンターの例"}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/01-Counter","kind":"article","type":"topic","url":"\/documentation\/actomatonstore\/01-counter"},"doc://ActomatonStore/documentation/ActomatonStore/SendRouteEnvironment":{"role":"symbol","title":"SendRouteEnvironment","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SendRouteEnvironment"}],"abstract":[{"type":"text","text":"Wrapper of original "},{"type":"codeVoice","code":"environment"},{"type":"text","text":" with attaching "},{"type":"codeVoice","code":"sendRoute"},{"type":"text","text":"."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/SendRouteEnvironment","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SendRouteEnvironment"}],"url":"\/documentation\/actomatonstore\/sendrouteenvironment"},"doc://ActomatonStore/documentation/ActomatonStore/04-HostingViewController":{"role":"article","title":"4. HostingViewController","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/HostingViewController"},{"type":"text","text":" を使った "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" と SwiftUI の連携"}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/04-HostingViewController","kind":"article","type":"topic","url":"\/documentation\/actomatonstore\/04-hostingviewcontroller"},"doc://ActomatonStore/documentation/ActomatonStore":{"role":"collection","title":"ActomatonStore","abstract":[{"type":"text","text":"Swift Concurrency (async\/await、Structured Concurrency、Actor) を使った、状態と副作用の管理のためのフレームワーク。"}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore","kind":"symbol","type":"topic","url":"\/documentation\/actomatonstore"},"https://github.com/pointfreeco/swift-composable-architecture":{"title":"swift-composable-architecture","titleInlineContent":[{"type":"text","text":"swift-composable-architecture"}],"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture","url":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture"},"https://github.com/Actomaton/Actomaton":{"title":"https:\/\/github.com\/Actomaton\/Actomaton","titleInlineContent":[{"type":"text","text":"https:\/\/github.com\/Actomaton\/Actomaton"}],"type":"link","identifier":"https:\/\/github.com\/Actomaton\/Actomaton","url":"https:\/\/github.com\/Actomaton\/Actomaton"},"https://redux.js.org/":{"title":"Redux","titleInlineContent":[{"type":"text","text":"Redux"}],"type":"link","identifier":"https:\/\/redux.js.org\/","url":"https:\/\/redux.js.org\/"},"doc://ActomatonStore/documentation/ActomatonStore/Store/ObservableProxy-swift.class":{"conformance":{"constraints":[{"type":"codeVoice","code":"Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", "},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"Store.ObservableProxy","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObservableProxy"}],"abstract":[{"type":"text","text":"Lightweight "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" proxy that is state-observable and action-sendable."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store\/ObservableProxy-swift.class","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ObservableProxy"}],"url":"\/documentation\/actomatonstore\/store\/observableproxy-swift.class"},"doc://ActomatonStore/documentation/ActomatonStore/StoreConfiguration":{"role":"symbol","title":"StoreConfiguration","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreConfiguration"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store"},{"type":"text","text":" configuration."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/StoreConfiguration","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StoreConfiguration"}],"url":"\/documentation\/actomatonstore\/storeconfiguration"},"http://elm-lang.org/":{"title":"Elm","titleInlineContent":[{"type":"text","text":"Elm"}],"type":"link","identifier":"http:\/\/elm-lang.org\/","url":"http:\/\/elm-lang.org\/"},"https://github.com/Actomaton/Actomaton-Gallery":{"title":"Actomaton-Gallery","titleInlineContent":[{"type":"text","text":"Actomaton-Gallery"}],"type":"link","identifier":"https:\/\/github.com\/Actomaton\/Actomaton-Gallery","url":"https:\/\/github.com\/Actomaton\/Actomaton-Gallery"},"doc://ActomatonStore/documentation/ActomatonStore/RouteStore":{"role":"symbol","title":"RouteStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouteStore"}],"abstract":[{"type":"text","text":"Subclass of "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" that also outputs "},{"type":"codeVoice","code":"routes"},{"type":"text","text":", mainly used for UIKit’s navigation handling"},{"type":"text","text":" "},{"type":"text","text":"without using "},{"type":"codeVoice","code":"State"},{"type":"text","text":" as a single source of truth."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouteStore"}],"url":"\/documentation\/actomatonstore\/routestore"},"doc://ActomatonStore/documentation/ActomatonStore/03-RouteStore":{"role":"article","title":"3. RouteStore によるルーティング","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" を使って他の "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" にメッセージングする例"}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/03-RouteStore","kind":"article","type":"topic","url":"\/documentation\/actomatonstore\/03-routestore"},"doc://ActomatonStore/documentation/ActomatonStore/OOP-Tutorial":{"role":"article","title":"RouteStore チュートリアル","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/RouteStore"},{"type":"text","text":" を使った MVVM 構成の iOS アプリ開発の解説 (for UIKit & SwiftUI)"}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/OOP-Tutorial","kind":"article","type":"topic","url":"\/documentation\/actomatonstore\/oop-tutorial"},"doc://ActomatonStore/documentation/ActomatonStore/Store":{"role":"symbol","title":"Store","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"type":"text","text":"Store of "},{"type":"codeVoice","code":"Actomaton"},{"type":"text","text":" optimized for SwiftUI’s 2-way binding."}],"identifier":"doc:\/\/ActomatonStore\/documentation\/ActomatonStore\/Store","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Store"}],"url":"\/documentation\/actomatonstore\/store"}}}