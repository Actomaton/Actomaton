{
  "interfaceLanguages": {
    "swift": [
      {
        "children": [
          {
            "title": "Getting Started",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/actomaton/examples",
            "title": "Example Code",
            "type": "article"
          },
          {
            "title": "Esssentials",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/actomaton/init(state:reducer:)",
                "title": "convenience init(state: State, reducer: Reducer<Action, State, ()>)",
                "type": "init"
              },
              {
                "path": "/documentation/actomaton/actomaton/init(state:reducer:environment:)",
                "title": "convenience init<Environment>(state: State, reducer: Reducer<Action, State, Environment>, environment: Environment)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/actomaton/state",
                "title": "var state: State",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/actomaton/send(_:priority:tracksfeedbacks:)",
                "title": "func send(Action, priority: TaskPriority?, tracksFeedbacks: Bool) -> Task<(), Error>?",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomaton/actomaton/unownedexecutor",
                    "title": "var unownedExecutor: UnownedSerialExecutor",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomaton/actomaton/assertisolated(_:file:line:)",
                    "title": "func assertIsolated(() -> String, file: StaticString, line: UInt)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomaton/actomaton/assumeisolated(_:file:line:)",
                    "title": "func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomaton/actomaton/preconditionisolated(_:file:line:)",
                    "title": "func preconditionIsolated(() -> String, file: StaticString, line: UInt)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/actomaton/actomaton/actor-implementations",
                "title": "Actor Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomaton/actomaton",
            "title": "Actomaton",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/reducer/+(_:_:)",
                "title": "static func + (Reducer, Reducer) -> Reducer",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/reducer/init(_:)",
                "title": "init((Action, inout State, Environment) -> Effect<Action>)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/reducer/run",
                "title": "let run: (Action, inout State, Environment) -> Effect<Action>",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/reducer/contramap(action:)",
                "title": "func contramap<GlobalAction>(action: CasePath<GlobalAction, Action>) -> Reducer<GlobalAction, State, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/reducer/contramap(environment:)",
                "title": "func contramap<GlobalEnvironment>(environment: (GlobalEnvironment) -> Environment) -> Reducer<Action, State, GlobalEnvironment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/reducer/contramap(state:)-5etrg",
                "title": "func contramap<GlobalState>(state: WritableKeyPath<GlobalState, State>) -> Reducer<Action, GlobalState, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/reducer/contramap(state:)-ac69",
                "title": "func contramap<GlobalState>(state: CasePath<GlobalState, State>) -> Reducer<Action, GlobalState, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/reducer/map(id:)",
                "title": "func map<ID>(id: (EffectID?) -> ID?) -> Reducer",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/reducer/map(queue:)",
                "title": "func map<Queue>(queue: (EffectQueue?) -> Queue?) -> Reducer",
                "type": "method"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/reducer/empty",
                "title": "static var empty: Reducer",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/reducer/combine(_:)-635b0",
                "title": "static func combine(Reducer...) -> Reducer",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/reducer/combine(_:)-6exc",
                "title": "static func combine([Reducer]) -> Reducer",
                "type": "method"
              }
            ],
            "path": "/documentation/actomaton/reducer",
            "title": "Reducer",
            "type": "struct"
          },
          {
            "title": "Effects",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/effect/+(_:_:)",
                "title": "static func + (Effect, Effect) -> Effect",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/effect/init(id:queue:run:)",
                "title": "init<ID, Queue>(id: ID?, queue: Queue?, run: () async throws -> Action?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomaton/effect/init(id:queue:sequence:)",
                "title": "init<ID, S, Queue>(id: ID?, queue: Queue?, sequence: () async throws -> S?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomaton/effect/init(id:run:)",
                "title": "init<ID>(id: ID?, run: () async throws -> Action?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomaton/effect/init(id:sequence:)",
                "title": "init<ID, S>(id: ID?, sequence: () async throws -> S?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomaton/effect/init(queue:run:)",
                "title": "init<Queue>(queue: Queue?, run: () async throws -> Action?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomaton/effect/init(queue:sequence:)",
                "title": "init<S, Queue>(queue: Queue?, sequence: () async throws -> S?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomaton/effect/init(run:)",
                "title": "init(run: () async throws -> Action?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomaton/effect/init(sequence:)",
                "title": "init<S>(sequence: () async throws -> S?)",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/effect/map(_:)",
                "title": "func map<Action2>((Action) -> Action2) -> Effect<Action2>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/effect/map(id:)",
                "title": "func map<ID>(id: (EffectID?) -> ID?) -> Effect",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/effect/map(queue:)",
                "title": "func map<Queue>(queue: (EffectQueue?) -> Queue?) -> Effect",
                "type": "method"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/effect/empty",
                "title": "static var empty: Effect<Action>",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/effect/cancel(id:)",
                "title": "static func cancel<ID>(id: ID) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/effect/cancel(ids:)",
                "title": "static func cancel(ids: (EffectID) -> Bool) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/effect/combine(_:)-7f3gl",
                "title": "static func combine(Effect...) -> Effect",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/effect/combine(_:)-lf4b",
                "title": "static func combine([Effect]) -> Effect",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/effect/fireandforget(id:queue:run:)",
                "title": "static func fireAndForget<ID, Queue>(id: ID?, queue: Queue?, run: () async throws -> ()) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/effect/fireandforget(id:run:)",
                "title": "static func fireAndForget<ID>(id: ID?, run: () async throws -> ()) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/effect/fireandforget(queue:run:)",
                "title": "static func fireAndForget<Queue>(queue: Queue?, run: () async throws -> ()) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/effect/fireandforget(run:)",
                "title": "static func fireAndForget(run: () async throws -> ()) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/effect/nextaction(_:)",
                "title": "static func nextAction(Action) -> Effect<Action>",
                "type": "method"
              }
            ],
            "path": "/documentation/actomaton/effect",
            "title": "Effect",
            "type": "struct"
          },
          {
            "path": "/documentation/actomaton/effectidprotocol",
            "title": "EffectIDProtocol",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "path": "/documentation/actomaton/effectqueueprotocol/effectqueuedelay-9vupq",
                        "title": "var effectQueueDelay: EffectQueueDelay",
                        "type": "property"
                      }
                    ],
                    "title": "EffectQueueProtocol Implementations",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/actomaton/effectqueueprotocol/effectqueuedelay-19mtm",
                "title": "var effectQueueDelay: EffectQueueDelay",
                "type": "property"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "path": "/documentation/actomaton/effectqueueprotocol/effectqueuepolicy-2jm18",
                        "title": "var effectQueuePolicy: EffectQueuePolicy",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/actomaton/effectqueueprotocol/effectqueuepolicy-1qeeh",
                        "title": "var effectQueuePolicy: EffectQueuePolicy",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/actomaton/effectqueueprotocol/effectqueuepolicy-237xs",
                        "title": "var effectQueuePolicy: EffectQueuePolicy",
                        "type": "property"
                      }
                    ],
                    "title": "EffectQueueProtocol Implementations",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/actomaton/effectqueueprotocol/effectqueuepolicy-3o8io",
                "title": "var effectQueuePolicy: EffectQueuePolicy",
                "type": "property"
              }
            ],
            "path": "/documentation/actomaton/effectqueueprotocol",
            "title": "EffectQueueProtocol",
            "type": "protocol"
          },
          {
            "title": "EffectQueuePolicy and built-ins",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/effectqueuepolicy/runnewest(maxcount:)",
                "title": "case runNewest(maxCount: Int)",
                "type": "case"
              },
              {
                "path": "/documentation/actomaton/effectqueuepolicy/runoldest(maxcount:_:)",
                "title": "case runOldest(maxCount: Int, OverflowPolicy)",
                "type": "case"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomaton/effectqueuepolicy/overflowpolicy/discardnew",
                    "title": "case discardNew",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/actomaton/effectqueuepolicy/overflowpolicy/suspendnew",
                    "title": "case suspendNew",
                    "type": "case"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/actomaton/effectqueuepolicy/overflowpolicy/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/actomaton/effectqueuepolicy/overflowpolicy/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "symbol"
                  }
                ],
                "path": "/documentation/actomaton/effectqueuepolicy/overflowpolicy",
                "title": "EffectQueuePolicy.OverflowPolicy",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomaton/effectqueuepolicy/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomaton/effectqueuepolicy/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomaton/effectqueuepolicy",
            "title": "EffectQueuePolicy",
            "type": "enum"
          },
          {
            "path": "/documentation/actomaton/newest1effectqueueprotocol",
            "title": "Newest1EffectQueueProtocol",
            "type": "protocol"
          },
          {
            "path": "/documentation/actomaton/oldest1discardneweffectqueueprotocol",
            "title": "Oldest1DiscardNewEffectQueueProtocol",
            "type": "protocol"
          },
          {
            "path": "/documentation/actomaton/oldest1suspendneweffectqueueprotocol",
            "title": "Oldest1SuspendNewEffectQueueProtocol",
            "type": "protocol"
          },
          {
            "title": "EffectID/Queue Wrapper",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/effectid/value",
                "title": "var value: AnyHashable",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomaton/effectid/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomaton/effectid/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomaton/effectid",
            "title": "EffectID",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/effectqueue/value",
                "title": "var value: AnyHashable",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomaton/effectqueue/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomaton/effectqueue/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomaton/effectqueue",
            "title": "EffectQueue",
            "type": "struct"
          },
          {
            "title": "Articles",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/actomaton/01-counter",
            "title": "Example 1: Simple Counter",
            "type": "article"
          },
          {
            "path": "/documentation/actomaton/02-loginlogout",
            "title": "Example 2: Auth state",
            "type": "article"
          },
          {
            "path": "/documentation/actomaton/03-timer",
            "title": "Example 3: Timer",
            "type": "article"
          },
          {
            "path": "/documentation/actomaton/04-effectqueue",
            "title": "Example 4: EffectQueue",
            "type": "article"
          },
          {
            "path": "/documentation/actomaton/05-reducercomposition",
            "title": "Example 5: Making a large app (Reducer Composition)",
            "type": "article"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/casepath/'..(_:_:)-8selm",
                "title": "static func .. <AppendedValue>(CasePath<Root, Value>, CasePath<Value, AppendedValue>) -> CasePath<Root, AppendedValue>",
                "type": "op"
              },
              {
                "path": "/documentation/actomaton/casepath/'..(_:_:)-9emru",
                "title": "static func .. <AppendedValue>(CasePath<Root, Value>, (AppendedValue) -> Value) -> CasePath<Root, AppendedValue>",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/casepath/init(embed:extract:)",
                "title": "init(embed: (Value) -> Root, extract: (Root) -> Value?)",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/casepath/appending(path:)",
                "title": "func appending<AppendedValue>(path: CasePath<Value, AppendedValue>) -> CasePath<Root, AppendedValue>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/casepath/embed(_:)",
                "title": "func embed(Value) -> Root",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/casepath/extract(from:)",
                "title": "func extract(from: Root) -> Value?",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/casepath/modify(_:_:)",
                "title": "func modify(inout Root, (inout Value) throws -> Void) throws",
                "type": "method"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/casepath/description-swift.type.property",
                "title": "static var description: CasePath<String, Value>",
                "type": "property"
              },
              {
                "path": "/documentation/actomaton/casepath/never",
                "title": "static var never: CasePath<Root, Never>",
                "type": "property"
              },
              {
                "path": "/documentation/actomaton/casepath/rawvalue",
                "title": "static var rawValue: CasePath<Root, Value>",
                "type": "property"
              },
              {
                "path": "/documentation/actomaton/casepath/self",
                "title": "static var `self`: CasePath<Root, Root>",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/casepath/case(_:)-3nw1d",
                "title": "static func `case`((Value) -> Root) -> CasePath<Root, Value>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/casepath/case(_:)-5s7mr",
                "title": "static func `case`(Root) -> CasePath<Root, Value>",
                "type": "method"
              },
              {
                "path": "/documentation/actomaton/casepath/constant(_:)",
                "title": "static func constant(Value) -> CasePath<Root, Value>",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomaton/casepath/description-swift.property",
                    "title": "var description: String",
                    "type": "property"
                  }
                ],
                "path": "/documentation/actomaton/casepath/customstringconvertible-implementations",
                "title": "CustomStringConvertible Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomaton/casepath",
            "title": "CasePath",
            "type": "struct"
          },
          {
            "title": "Functions",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/actomaton/extract(_:)-2jy2a",
            "title": "func extract<Root, Value>((Value) -> Root) -> (Root) -> Value?",
            "type": "func"
          },
          {
            "path": "/documentation/actomaton/extract(_:)-5ivuf",
            "title": "func extract<Root, Value>((Value) -> Root?) -> (Root?) -> Value?",
            "type": "func"
          },
          {
            "path": "/documentation/actomaton/extract(case:from:)-82wth",
            "title": "func extract<Root, Value>(case: (Value) -> Root?, from: Root?) -> Value?",
            "type": "func"
          },
          {
            "path": "/documentation/actomaton/extract(case:from:)-89rof",
            "title": "func extract<Root, Value>(case: (Value) -> Root, from: Root) -> Value?",
            "type": "func"
          },
          {
            "title": "Operators",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/actomaton/'..(_:_:)",
            "title": "func .. <Root, Value, AppendedValue>((Root) -> Value?, (AppendedValue) -> Value) -> (Root) -> AppendedValue?",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton//(_:)-1zudw",
            "title": "func / <Root>(Root?) -> CasePath<Root?, Void>",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton//(_:)-2n5ny",
            "title": "func / <Root>(Root.Type) -> CasePath<Root, Root>",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton//(_:)-2r5nq",
            "title": "func / <Root, Value>((Value) -> Root?) -> CasePath<Root?, Value>",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton//(_:)-4nrup",
            "title": "func / <Root>(Root) -> CasePath<Root, Void>",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton//(_:)-4qhtw",
            "title": "func / <Root>(CasePath<Root, Root>) -> CasePath<Root, Root>",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton//(_:)-4v1w8",
            "title": "func / <Root>(Root) -> (Root) -> Void?",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton//(_:)-82yvm",
            "title": "func / <Root, Value>((Value) -> Root) -> CasePath<Root, Value>",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton//(_:)-8h7yj",
            "title": "func / <Root, Value>((Value) -> Root?) -> (Root?) -> Value?",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton//(_:)-9oq0w",
            "title": "func / <Root>(Root) -> (Root?) -> Void?",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton//(_:)-9tuff",
            "title": "func / <Root, Value>((Value) -> Root) -> (Root) -> Value?",
            "type": "op"
          },
          {
            "path": "/documentation/actomaton/~=(_:_:)",
            "title": "func ~= <Root, Value>(CasePath<Root, Value>, Root) -> Bool",
            "type": "op"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomaton/effectqueuedelay/constant(_:)",
                "title": "case constant(TimeInterval)",
                "type": "case"
              },
              {
                "path": "/documentation/actomaton/effectqueuedelay/random(_:)",
                "title": "case random(ClosedRange<TimeInterval>)",
                "type": "case"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomaton/effectqueuedelay/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomaton/effectqueuedelay/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomaton/effectqueuedelay",
            "title": "EffectQueueDelay",
            "type": "enum"
          }
        ],
        "path": "/documentation/actomaton",
        "title": "Actomaton",
        "type": "module"
      },
      {
        "children": [
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatondebugging/actionlogformat/simple",
                "title": "static let simple: ActionLogFormat",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatondebugging/actionlogformat/all(maxdepth:)",
                "title": "static func all(maxDepth: Int) -> ActionLogFormat",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatondebugging/actionlogformat/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomatondebugging/actionlogformat/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatondebugging/actionlogformat",
            "title": "ActionLogFormat",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatondebugging/logformat/init(name:action:state:)",
                "title": "init(name: String?, action: ActionLogFormat?, state: StateLogFormat?)",
                "type": "init"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatondebugging/logformat/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomatondebugging/logformat/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatondebugging/logformat",
            "title": "LogFormat",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatondebugging/statelogformat/diff",
                "title": "static let diff: StateLogFormat",
                "type": "property"
              },
              {
                "path": "/documentation/actomatondebugging/statelogformat/simple",
                "title": "static let simple: StateLogFormat",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatondebugging/statelogformat/all(maxdepth:)",
                "title": "static func all(maxDepth: Int) -> StateLogFormat",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatondebugging/statelogformat/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomatondebugging/statelogformat/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatondebugging/statelogformat",
            "title": "StateLogFormat",
            "type": "struct"
          },
          {
            "title": "Extended Modules",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Extended Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatondebugging/actomaton/reducer/debug(_:action:state:)",
                    "title": "func debug(String?, action: ActionLogFormat?, state: StateLogFormat?) -> Reducer",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatondebugging/actomaton/reducer/log(format:)",
                    "title": "func log(format: LogFormat?) -> Reducer",
                    "type": "method"
                  },
                  {
                    "title": "Type Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatondebugging/actomaton/reducer/debug(_:action:state:_:)",
                    "title": "static func debug(String?, action: ActionLogFormat?, state: StateLogFormat?, (Action, inout State, Environment) -> Effect<Action>) -> Reducer",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatondebugging/actomaton/reducer/log(format:_:)",
                    "title": "static func log(format: LogFormat?, (Action, inout State, Environment) -> Effect<Action>) -> Reducer",
                    "type": "method"
                  }
                ],
                "path": "/documentation/actomatondebugging/actomaton/reducer",
                "title": "Reducer",
                "type": "extension"
              }
            ],
            "path": "/documentation/actomatondebugging/actomaton",
            "title": "Actomaton",
            "type": "extension"
          }
        ],
        "path": "/documentation/actomatondebugging",
        "title": "ActomatonDebugging",
        "type": "module"
      },
      {
        "children": [
          {
            "title": "Getting Started",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/actomatonui/oop-tutorial",
            "title": "RouteStore チュートリアル",
            "type": "article"
          },
          {
            "title": "Esssentials",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/store/init(state:reducer:configuration:)",
                "title": "init(state: State, reducer: Reducer<Action, State, Void>, configuration: StoreConfiguration)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/store/init(state:reducer:environment:configuration:)",
                "title": "init(state: State, reducer: Reducer<Action, State, Environment>, environment: Environment, configuration: StoreConfiguration)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/store/environment",
                "title": "let environment: Environment",
                "type": "property"
              },
              {
                "path": "/documentation/actomatonui/store/noaction",
                "title": "var noAction: Store<Never, State, Environment>",
                "type": "property"
              },
              {
                "path": "/documentation/actomatonui/store/noenvironment",
                "title": "var noEnvironment: Store<Action, State, Void>",
                "type": "property"
              },
              {
                "path": "/documentation/actomatonui/store/nostate",
                "title": "var noState: Store<Action, Void, Environment>",
                "type": "property"
              },
              {
                "path": "/documentation/actomatonui/store/state",
                "title": "var state: State",
                "type": "property"
              },
              {
                "path": "/documentation/actomatonui/store/viewstore",
                "title": "var viewStore: ViewStore<Action, State>",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/store/casemap(state:)",
                "title": "func caseMap<SubState>(state: CasePath<State, SubState>) -> Store<Action, SubState?, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/store/contramap(action:)",
                "title": "func contramap<SubAction>(action: (SubAction) -> Action) -> Store<SubAction, State, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/store/indirectmap(state:)",
                "title": "func indirectMap<SubState>(state: (State) -> SubState) -> Store<Action, SubState, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/store/map(environment:)",
                "title": "func map<SubEnvironment>(environment: (Environment) -> SubEnvironment) -> Store<Action, State, SubEnvironment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/store/map(optionalstate:)",
                "title": "func map<State_, SubState>(optionalState: WritableKeyPath<State_, SubState>) -> Store<Action, SubState?, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/store/map(state:)",
                "title": "func map<SubState>(state: WritableKeyPath<State, SubState>) -> Store<Action, SubState, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/store/map(states:)",
                "title": "func map<State_, SubState>(states: WritableKeyPath<State_, SubState>) -> Store<Action, [SubState], Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/store/optionalize()",
                "title": "func optionalize<State_>() -> Store<Action, State_, Environment>?",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/store/send(_:priority:tracksfeedbacks:)",
                "title": "func send(Action, priority: TaskPriority?, tracksFeedbacks: Bool) -> Task<(), Error>?",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/store/viewstore(arestatesequal:)",
                "title": "func viewStore(areStatesEqual: (State, State) -> Bool) -> ViewStore<Action, State>",
                "type": "method"
              }
            ],
            "path": "/documentation/actomatonui/store",
            "title": "Store",
            "type": "class"
          },
          {
            "title": "For SwiftUI binding",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/viewstore/directbinding",
                "title": "var directBinding: Binding<State>",
                "type": "property"
              },
              {
                "path": "/documentation/actomatonui/viewstore/state",
                "title": "var state: State",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/viewstore/binding(get:onchange:)",
                "title": "func binding<SubState>(get: (State) -> SubState, onChange: (SubState) -> Action?) -> Binding<SubState>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/viewstore/binding(onchange:)",
                "title": "func binding(onChange: (State) -> Action?) -> Binding<State>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/viewstore/ispresented(ondismiss:)-7b1qc",
                "title": "func isPresented(onDismiss: () -> Action) -> Binding<Bool>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/viewstore/ispresented(ondismiss:)-j8wz",
                "title": "func isPresented<Wrapped>(onDismiss: () -> Action) -> Binding<Bool>",
                "type": "method"
              },
              {
                "title": "Subscripts",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/viewstore/subscript(dynamicmember:)",
                "title": "subscript<SubState>(dynamicMember _: KeyPath<State, SubState>) -> SubState",
                "type": "subscript"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/viewstore/objectwillchange",
                    "title": "var objectWillChange: ObservableObjectPublisher",
                    "type": "property"
                  }
                ],
                "path": "/documentation/actomatonui/viewstore/observableobject-implementations",
                "title": "ObservableObject Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/viewstore",
            "title": "ViewStore",
            "type": "class"
          },
          {
            "title": "For Object-Oriented Programming",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/routestore/init(state:reducer:environment:configuration:routetype:)",
                "title": "init(state: State, reducer: Reducer<Action, State, SendRouteEnvironment<Environment, Route>>, environment: Environment, configuration: StoreConfiguration, routeType: Route.Type)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/routestore/init(state:reducer:routetype:)",
                "title": "init(state: State, reducer: Reducer<Action, State, SendRouteEnvironment<Void, Route>>, routeType: Route.Type)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/routestore/nosendroute",
                "title": "var noSendRoute: Store<Action, State, Environment>",
                "type": "property"
              },
              {
                "path": "/documentation/actomatonui/routestore/routes",
                "title": "var routes: AnyPublisher<Route, Never>",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/routestore/subscriberoutes(_:)",
                "title": "func subscribeRoutes((Route) -> Void)",
                "type": "method"
              }
            ],
            "path": "/documentation/actomatonui/routestore",
            "title": "RouteStore",
            "type": "class"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/sendrouteenvironment/init(environment:sendroute:)",
                "title": "init(environment: Environment, sendRoute: (Route) -> Void)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/sendrouteenvironment/environment",
                "title": "var environment: Environment",
                "type": "property"
              },
              {
                "path": "/documentation/actomatonui/sendrouteenvironment/sendroute",
                "title": "var sendRoute: (Route) -> Void",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/sendrouteenvironment/sendrouteasync(_:)-22def",
                "title": "func sendRouteAsync<Value>(((Value) -> Void) -> Route) async -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/sendrouteenvironment/sendrouteasync(_:)-5552t",
                "title": "func sendRouteAsync<Value, Error>(((Result<Value, Error>) -> Void) -> Route) async throws -> Value",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/sendrouteenvironment/sendrouteasyncstream(_:)-7ezhz",
                "title": "func sendRouteAsyncStream<Value>((AsyncStream<Value>.Continuation) -> Route) -> AsyncStream<Value>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/sendrouteenvironment/sendrouteasyncstream(_:)-zl5i",
                "title": "func sendRouteAsyncStream<Value>((AsyncThrowingStream<Value, Swift.Error>.Continuation) -> Route) -> AsyncThrowingStream<Value, Swift.Error>",
                "type": "method"
              }
            ],
            "path": "/documentation/actomatonui/sendrouteenvironment",
            "title": "SendRouteEnvironment",
            "type": "struct"
          },
          {
            "title": "UIKit View Hosting Helper",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/hostingviewcontroller/init(coder:)",
                "title": "init?(coder: NSCoder)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/hostingviewcontroller/init(store:content:)-5otox",
                "title": "init(store: Store<Action, State, Environment>, content: @MainActor (Store<Action, State, Environment>) -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/hostingviewcontroller/init(store:content:)-9y4gy",
                "title": "init<Route>(store: RouteStore<Action, State, Environment, Route>, content: @MainActor (Store<Action, State, Environment>) -> Content)",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/hostingviewcontroller/viewdidload()",
                "title": "func viewDidLoad()",
                "type": "method"
              }
            ],
            "path": "/documentation/actomatonui/hostingviewcontroller",
            "title": "HostingViewController",
            "type": "class"
          },
          {
            "title": "Articles",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/actomatonui/01-counter",
            "title": "1. シンプルなカウンター",
            "type": "article"
          },
          {
            "path": "/documentation/actomatonui/02-loginlogout",
            "title": "2. 認証フローの状態管理・副作用管理",
            "type": "article"
          },
          {
            "path": "/documentation/actomatonui/03-routestore",
            "title": "3. RouteStore によるルーティング",
            "type": "article"
          },
          {
            "path": "/documentation/actomatonui/04-hostingviewcontroller",
            "title": "4. HostingViewController",
            "type": "article"
          },
          {
            "path": "/documentation/actomatonui/05-viewstore",
            "title": "5. ViewStore",
            "type": "article"
          },
          {
            "title": "Classes",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/actomaton/init(state:reducer:)",
                "title": "convenience init(state: State, reducer: Reducer<Action, State, ()>)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/actomaton/init(state:reducer:environment:)",
                "title": "convenience init<Environment>(state: State, reducer: Reducer<Action, State, Environment>, environment: Environment)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/actomaton/state",
                "title": "var state: State",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/actomaton/send(_:priority:tracksfeedbacks:)",
                "title": "func send(Action, priority: TaskPriority?, tracksFeedbacks: Bool) -> Task<(), Error>?",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/actomaton/unownedexecutor",
                    "title": "var unownedExecutor: UnownedSerialExecutor",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/actomaton/assertisolated(_:file:line:)",
                    "title": "func assertIsolated(() -> String, file: StaticString, line: UInt)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/actomaton/assumeisolated(_:file:line:)",
                    "title": "func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/actomaton/preconditionisolated(_:file:line:)",
                    "title": "func preconditionIsolated(() -> String, file: StaticString, line: UInt)",
                    "type": "method"
                  }
                ],
                "path": "/documentation/actomatonui/actomaton/actor-implementations",
                "title": "Actor Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/actomaton",
            "title": "Actomaton",
            "type": "class"
          },
          {
            "title": "Protocols",
            "type": "groupMarker"
          },
          {
            "path": "/documentation/actomatonui/effectidprotocol",
            "title": "EffectIDProtocol",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "path": "/documentation/actomatonui/effectqueueprotocol/effectqueuedelay-9vupq",
                        "title": "var effectQueueDelay: EffectQueueDelay",
                        "type": "property"
                      }
                    ],
                    "title": "EffectQueueProtocol Implementations",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/actomatonui/effectqueueprotocol/effectqueuedelay-19mtm",
                "title": "var effectQueueDelay: EffectQueueDelay",
                "type": "property"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "path": "/documentation/actomatonui/effectqueueprotocol/effectqueuepolicy-2jm18",
                        "title": "var effectQueuePolicy: EffectQueuePolicy",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/actomatonui/effectqueueprotocol/effectqueuepolicy-237xs",
                        "title": "var effectQueuePolicy: EffectQueuePolicy",
                        "type": "property"
                      },
                      {
                        "path": "/documentation/actomatonui/effectqueueprotocol/effectqueuepolicy-1qeeh",
                        "title": "var effectQueuePolicy: EffectQueuePolicy",
                        "type": "property"
                      }
                    ],
                    "title": "EffectQueueProtocol Implementations",
                    "type": "groupMarker"
                  }
                ],
                "path": "/documentation/actomatonui/effectqueueprotocol/effectqueuepolicy-3o8io",
                "title": "var effectQueuePolicy: EffectQueuePolicy",
                "type": "property"
              }
            ],
            "path": "/documentation/actomatonui/effectqueueprotocol",
            "title": "EffectQueueProtocol",
            "type": "protocol"
          },
          {
            "path": "/documentation/actomatonui/newest1effectqueueprotocol",
            "title": "Newest1EffectQueueProtocol",
            "type": "protocol"
          },
          {
            "path": "/documentation/actomatonui/oldest1discardneweffectqueueprotocol",
            "title": "Oldest1DiscardNewEffectQueueProtocol",
            "type": "protocol"
          },
          {
            "path": "/documentation/actomatonui/oldest1suspendneweffectqueueprotocol",
            "title": "Oldest1SuspendNewEffectQueueProtocol",
            "type": "protocol"
          },
          {
            "title": "Structures",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/actionlogformat/simple",
                "title": "static let simple: ActionLogFormat",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/actionlogformat/all(maxdepth:)",
                "title": "static func all(maxDepth: Int) -> ActionLogFormat",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/actionlogformat/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomatonui/actionlogformat/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/actionlogformat",
            "title": "ActionLogFormat",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/currentvaluepublisher/init(_:)",
                "title": "init(CurrentValueSubject<Value, Never>)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/currentvaluepublisher/projectedvalue",
                "title": "var projectedValue: AnyPublisher<Value, Never>",
                "type": "property"
              },
              {
                "path": "/documentation/actomatonui/currentvaluepublisher/wrappedvalue",
                "title": "var wrappedValue: Value",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/currentvaluepublisher/map(_:)-1y2f8",
                "title": "func map<Value2>((Value) -> Value2) -> CurrentValuePublisher<Value2>",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/values-261yg",
                    "title": "var values: AsyncThrowingPublisher<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/values-9t0w1",
                    "title": "var values: AsyncPublisher<Self>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/append(_:)",
                    "title": "func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/assertnofailure(_:file:line:)",
                    "title": "func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/assign(to:)",
                    "title": "func assign(to: inout Published<Self.Output>.Publisher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/assign(to:on:)",
                    "title": "func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
                    "title": "func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/breakpointonerror()",
                    "title": "func breakpointOnError() -> Publishers.Breakpoint<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/buffer(size:prefetch:whenfull:)",
                    "title": "func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/catch(_:)",
                    "title": "func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/collect()",
                    "title": "func collect() -> Publishers.Collect<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/collect(_:)",
                    "title": "func collect(Int) -> Publishers.CollectByCount<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/collect(_:options:)",
                    "title": "func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:)",
                    "title": "func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:_:)-404vt",
                    "title": "func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:_:)-6tqhk",
                    "title": "func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:_:_:)-808hx",
                    "title": "func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:_:_:)-8i74m",
                    "title": "func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:_:_:_:)",
                    "title": "func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/compactmap(_:)",
                    "title": "func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/contains(_:)",
                    "title": "func contains(Self.Output) -> Publishers.Contains<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/contains(where:)",
                    "title": "func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/count()",
                    "title": "func count() -> Publishers.Count<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/debounce(for:scheduler:options:)",
                    "title": "func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/decode(type:decoder:)",
                    "title": "func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/delay(for:tolerance:scheduler:options:)",
                    "title": "func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/drop(untiloutputfrom:)",
                    "title": "func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/drop(while:)",
                    "title": "func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Publishers.Drop<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/encode(encoder:)",
                    "title": "func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/erasetoanypublisher()",
                    "title": "func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/filter(_:)",
                    "title": "func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/first()",
                    "title": "func first() -> Publishers.First<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/first(where:)",
                    "title": "func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/flatmap(maxpublishers:_:)-31kfc",
                    "title": "func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/flatmap(maxpublishers:_:)-4iln2",
                    "title": "func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/flatmap(maxpublishers:_:)-4u6at",
                    "title": "func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/flatmap(maxpublishers:_:)-5gopf",
                    "title": "func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
                    "title": "func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/ignoreoutput()",
                    "title": "func ignoreOutput() -> Publishers.IgnoreOutput<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/last()",
                    "title": "func last() -> Publishers.Last<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/last(where:)",
                    "title": "func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/makeconnectable()",
                    "title": "func makeConnectable() -> Publishers.MakeConnectable<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/map(_:)-5wq9b",
                    "title": "func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/map(_:)-87ep5",
                    "title": "func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/map(_:_:)",
                    "title": "func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/map(_:_:_:)",
                    "title": "func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/maperror(_:)",
                    "title": "func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/max()",
                    "title": "func max() -> Publishers.Comparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/max(by:)",
                    "title": "func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/measureinterval(using:options:)",
                    "title": "func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:)",
                    "title": "func merge(with: Self) -> Publishers.MergeMany<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:)",
                    "title": "func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:_:)",
                    "title": "func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:_:_:)",
                    "title": "func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:_:_:_:)",
                    "title": "func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:_:_:_:_:)",
                    "title": "func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:_:_:_:_:_:)",
                    "title": "func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/min()",
                    "title": "func min() -> Publishers.Comparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/min(by:)",
                    "title": "func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/multicast(_:)",
                    "title": "func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/multicast(subject:)",
                    "title": "func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/output(at:)",
                    "title": "func output(at: Int) -> Publishers.Output<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/output(in:)",
                    "title": "func output<R>(in: R) -> Publishers.Output<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/prefix(_:)",
                    "title": "func prefix(Int) -> Publishers.Output<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/prefix(untiloutputfrom:)",
                    "title": "func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/prefix(while:)",
                    "title": "func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/prepend(_:)",
                    "title": "func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/print(_:to:)",
                    "title": "func print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/receive(on:options:)",
                    "title": "func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/receive(subscriber:)",
                    "title": "func receive<S>(subscriber: S)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/reduce(_:_:)",
                    "title": "func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/removeduplicates()",
                    "title": "func removeDuplicates() -> Publishers.RemoveDuplicates<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/removeduplicates(by:)",
                    "title": "func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/replaceempty(with:)",
                    "title": "func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/replaceerror(with:)",
                    "title": "func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/replacenil(with:)",
                    "title": "func replaceNil<T>(with: T) -> Publishers.Map<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/retry(_:)",
                    "title": "func retry(Int) -> Publishers.Retry<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/scan(_:_:)",
                    "title": "func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/setfailuretype(to:)",
                    "title": "func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/share()",
                    "title": "func share() -> Publishers.Share<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/sink(receivecompletion:receivevalue:)",
                    "title": "func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/sink(receivevalue:)",
                    "title": "func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/subscribe(_:)-1w6lb",
                    "title": "func subscribe<S>(S)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/subscribe(_:)-3tepf",
                    "title": "func subscribe<S>(S) -> AnyCancellable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/subscribe(on:options:)",
                    "title": "func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/switchtolatest()",
                    "title": "func switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/throttle(for:scheduler:latest:)",
                    "title": "func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/timeout(_:scheduler:options:customerror:)",
                    "title": "func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/toasyncstream()",
                    "title": "func toAsyncStream() -> AsyncStream<Output>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/toasyncthrowingstream()",
                    "title": "func toAsyncThrowingStream() -> AsyncThrowingStream<Output, Swift.Error>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryallsatisfy(_:)",
                    "title": "func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trycatch(_:)",
                    "title": "func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trycompactmap(_:)",
                    "title": "func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trycontains(where:)",
                    "title": "func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trydrop(while:)",
                    "title": "func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryfilter(_:)",
                    "title": "func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryfirst(where:)",
                    "title": "func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trylast(where:)",
                    "title": "func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trymap(_:)",
                    "title": "func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trymax(by:)",
                    "title": "func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trymin(by:)",
                    "title": "func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryprefix(while:)",
                    "title": "func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryreduce(_:_:)",
                    "title": "func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryremoveduplicates(by:)",
                    "title": "func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryscan(_:_:)",
                    "title": "func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:)",
                    "title": "func zip<P>(P) -> Publishers.Zip<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:_:)-25ybs",
                    "title": "func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:_:)-3w0w",
                    "title": "func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:_:_:)-226oh",
                    "title": "func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:_:_:)-65igc",
                    "title": "func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:_:_:_:)",
                    "title": "func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/failure",
                    "title": "CurrentValuePublisher.Failure",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/output",
                    "title": "CurrentValuePublisher.Output",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/actomatonui/currentvaluepublisher/publisher-implementations",
                "title": "Publisher Implementations",
                "type": "symbol"
              },
              {
                "children": [
                  {
                    "title": "Instance Properties",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/values-261yg",
                    "title": "var values: AsyncThrowingPublisher<Self>",
                    "type": "property"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/values-9t0w1",
                    "title": "var values: AsyncPublisher<Self>",
                    "type": "property"
                  },
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/allsatisfy(_:)",
                    "title": "func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/append(_:)",
                    "title": "func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/assertnofailure(_:file:line:)",
                    "title": "func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/assign(to:)",
                    "title": "func assign(to: inout Published<Self.Output>.Publisher)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/assign(to:on:)",
                    "title": "func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/breakpoint(receivesubscription:receiveoutput:receivecompletion:)",
                    "title": "func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/breakpointonerror()",
                    "title": "func breakpointOnError() -> Publishers.Breakpoint<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/buffer(size:prefetch:whenfull:)",
                    "title": "func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/catch(_:)",
                    "title": "func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/collect()",
                    "title": "func collect() -> Publishers.Collect<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/collect(_:)",
                    "title": "func collect(Int) -> Publishers.CollectByCount<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/collect(_:options:)",
                    "title": "func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:)",
                    "title": "func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:_:)-404vt",
                    "title": "func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:_:)-6tqhk",
                    "title": "func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:_:_:)-808hx",
                    "title": "func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:_:_:)-8i74m",
                    "title": "func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/combinelatest(_:_:_:_:)",
                    "title": "func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/compactmap(_:)",
                    "title": "func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/contains(_:)",
                    "title": "func contains(Self.Output) -> Publishers.Contains<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/contains(where:)",
                    "title": "func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/count()",
                    "title": "func count() -> Publishers.Count<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/debounce(for:scheduler:options:)",
                    "title": "func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/decode(type:decoder:)",
                    "title": "func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/delay(for:tolerance:scheduler:options:)",
                    "title": "func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/drop(untiloutputfrom:)",
                    "title": "func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/drop(while:)",
                    "title": "func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/dropfirst(_:)",
                    "title": "func dropFirst(Int) -> Publishers.Drop<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/encode(encoder:)",
                    "title": "func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/erasetoanypublisher()",
                    "title": "func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/filter(_:)",
                    "title": "func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/first()",
                    "title": "func first() -> Publishers.First<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/first(where:)",
                    "title": "func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/flatmap(maxpublishers:_:)-31kfc",
                    "title": "func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/flatmap(maxpublishers:_:)-4iln2",
                    "title": "func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/flatmap(maxpublishers:_:)-4u6at",
                    "title": "func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/flatmap(maxpublishers:_:)-5gopf",
                    "title": "func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)",
                    "title": "func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/ignoreoutput()",
                    "title": "func ignoreOutput() -> Publishers.IgnoreOutput<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/last()",
                    "title": "func last() -> Publishers.Last<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/last(where:)",
                    "title": "func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/makeconnectable()",
                    "title": "func makeConnectable() -> Publishers.MakeConnectable<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/map(_:)-5wq9b",
                    "title": "func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/map(_:)-87ep5",
                    "title": "func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/map(_:_:)",
                    "title": "func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/map(_:_:_:)",
                    "title": "func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/maperror(_:)",
                    "title": "func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/max()",
                    "title": "func max() -> Publishers.Comparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/max(by:)",
                    "title": "func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/measureinterval(using:options:)",
                    "title": "func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:)",
                    "title": "func merge(with: Self) -> Publishers.MergeMany<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:)",
                    "title": "func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:_:)",
                    "title": "func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:_:_:)",
                    "title": "func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:_:_:_:)",
                    "title": "func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:_:_:_:_:)",
                    "title": "func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/merge(with:_:_:_:_:_:_:)",
                    "title": "func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/min()",
                    "title": "func min() -> Publishers.Comparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/min(by:)",
                    "title": "func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/multicast(_:)",
                    "title": "func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/multicast(subject:)",
                    "title": "func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/output(at:)",
                    "title": "func output(at: Int) -> Publishers.Output<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/output(in:)",
                    "title": "func output<R>(in: R) -> Publishers.Output<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/prefix(_:)",
                    "title": "func prefix(Int) -> Publishers.Output<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/prefix(untiloutputfrom:)",
                    "title": "func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/prefix(while:)",
                    "title": "func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/prepend(_:)",
                    "title": "func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/print(_:to:)",
                    "title": "func print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/receive(on:options:)",
                    "title": "func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/receive(subscriber:)",
                    "title": "func receive<S>(subscriber: S)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/reduce(_:_:)",
                    "title": "func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/removeduplicates()",
                    "title": "func removeDuplicates() -> Publishers.RemoveDuplicates<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/removeduplicates(by:)",
                    "title": "func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/replaceempty(with:)",
                    "title": "func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/replaceerror(with:)",
                    "title": "func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/replacenil(with:)",
                    "title": "func replaceNil<T>(with: T) -> Publishers.Map<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/retry(_:)",
                    "title": "func retry(Int) -> Publishers.Retry<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/scan(_:_:)",
                    "title": "func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/setfailuretype(to:)",
                    "title": "func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/share()",
                    "title": "func share() -> Publishers.Share<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/sink(receivecompletion:receivevalue:)",
                    "title": "func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/sink(receivevalue:)",
                    "title": "func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/subscribe(_:)-1w6lb",
                    "title": "func subscribe<S>(S)",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/subscribe(_:)-3tepf",
                    "title": "func subscribe<S>(S) -> AnyCancellable",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/subscribe(on:options:)",
                    "title": "func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/switchtolatest()",
                    "title": "func switchToLatest() -> Publishers.SwitchToLatest<Self.Output, Publishers.SetFailureType<Self, Self.Output.Failure>>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/throttle(for:scheduler:latest:)",
                    "title": "func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/timeout(_:scheduler:options:customerror:)",
                    "title": "func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/toasyncstream()",
                    "title": "func toAsyncStream() -> AsyncStream<Output>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/toasyncthrowingstream()",
                    "title": "func toAsyncThrowingStream() -> AsyncThrowingStream<Output, Swift.Error>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryallsatisfy(_:)",
                    "title": "func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trycatch(_:)",
                    "title": "func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trycompactmap(_:)",
                    "title": "func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trycontains(where:)",
                    "title": "func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trydrop(while:)",
                    "title": "func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryfilter(_:)",
                    "title": "func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryfirst(where:)",
                    "title": "func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trylast(where:)",
                    "title": "func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trymap(_:)",
                    "title": "func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trymax(by:)",
                    "title": "func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/trymin(by:)",
                    "title": "func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryprefix(while:)",
                    "title": "func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryreduce(_:_:)",
                    "title": "func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryremoveduplicates(by:)",
                    "title": "func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/tryscan(_:_:)",
                    "title": "func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:)",
                    "title": "func zip<P>(P) -> Publishers.Zip<Self, P>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:_:)-25ybs",
                    "title": "func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:_:)-3w0w",
                    "title": "func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:_:_:)-226oh",
                    "title": "func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:_:_:)-65igc",
                    "title": "func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/zip(_:_:_:_:)",
                    "title": "func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>",
                    "type": "method"
                  },
                  {
                    "title": "Type Aliases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/failure",
                    "title": "CurrentValuePublisher.Failure",
                    "type": "typealias"
                  },
                  {
                    "path": "/documentation/actomatonui/currentvaluepublisher/output",
                    "title": "CurrentValuePublisher.Output",
                    "type": "typealias"
                  }
                ],
                "path": "/documentation/actomatonui/currentvaluepublisher/publisher-implementations",
                "title": "Publisher Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/currentvaluepublisher",
            "title": "CurrentValuePublisher",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/effect/+(_:_:)",
                "title": "static func + (Effect<Action>, Effect<Action>) -> Effect<Action>",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/effect/init(id:queue:run:)",
                "title": "init<ID, Queue>(id: ID?, queue: Queue?, run: () async throws -> Action?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/effect/init(id:queue:sequence:)",
                "title": "init<ID, S, Queue>(id: ID?, queue: Queue?, sequence: () async throws -> S?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/effect/init(id:run:)",
                "title": "init<ID>(id: ID?, run: () async throws -> Action?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/effect/init(id:sequence:)",
                "title": "init<ID, S>(id: ID?, sequence: () async throws -> S?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/effect/init(queue:run:)",
                "title": "init<Queue>(queue: Queue?, run: () async throws -> Action?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/effect/init(queue:sequence:)",
                "title": "init<S, Queue>(queue: Queue?, sequence: () async throws -> S?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/effect/init(run:)",
                "title": "init(run: () async throws -> Action?)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/effect/init(sequence:)",
                "title": "init<S>(sequence: () async throws -> S?)",
                "type": "init"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/effect/map(_:)",
                "title": "func map<Action2>((Action) -> Action2) -> Effect<Action2>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/effect/map(id:)",
                "title": "func map<ID>(id: (EffectID?) -> ID?) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/effect/map(queue:)",
                "title": "func map<Queue>(queue: (EffectQueue?) -> Queue?) -> Effect<Action>",
                "type": "method"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/effect/empty",
                "title": "static var empty: Effect<Action>",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/effect/cancel(id:)",
                "title": "static func cancel<ID>(id: ID) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/effect/cancel(ids:)",
                "title": "static func cancel(ids: (EffectID) -> Bool) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/effect/combine(_:)-7f3gl",
                "title": "static func combine(Effect<Action>...) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/effect/combine(_:)-lf4b",
                "title": "static func combine([Effect<Action>]) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/effect/fireandforget(id:queue:run:)",
                "title": "static func fireAndForget<ID, Queue>(id: ID?, queue: Queue?, run: () async throws -> ()) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/effect/fireandforget(id:run:)",
                "title": "static func fireAndForget<ID>(id: ID?, run: () async throws -> ()) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/effect/fireandforget(queue:run:)",
                "title": "static func fireAndForget<Queue>(queue: Queue?, run: () async throws -> ()) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/effect/fireandforget(run:)",
                "title": "static func fireAndForget(run: () async throws -> ()) -> Effect<Action>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/effect/nextaction(_:)",
                "title": "static func nextAction(Action) -> Effect<Action>",
                "type": "method"
              }
            ],
            "path": "/documentation/actomatonui/effect",
            "title": "Effect",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/effectid/value",
                "title": "var value: AnyHashable",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/effectid/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomatonui/effectid/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/effectid",
            "title": "EffectID",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/effectqueue/value",
                "title": "var value: AnyHashable",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/effectqueue/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomatonui/effectqueue/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/effectqueue",
            "title": "EffectQueue",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/logformat/init(name:action:state:)",
                "title": "init(name: String?, action: ActionLogFormat?, state: StateLogFormat?)",
                "type": "init"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/logformat/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomatonui/logformat/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/logformat",
            "title": "LogFormat",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Operators",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/reducer/+(_:_:)",
                "title": "static func + (Reducer<Action, State, Environment>, Reducer<Action, State, Environment>) -> Reducer<Action, State, Environment>",
                "type": "op"
              },
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/reducer/init(_:)",
                "title": "init((Action, inout State, Environment) -> Effect<Action>)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/reducer/run",
                "title": "let run: (Action, inout State, Environment) -> Effect<Action>",
                "type": "property"
              },
              {
                "title": "Instance Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/reducer/contramap(action:)",
                "title": "func contramap<GlobalAction>(action: CasePath<GlobalAction, Action>) -> Reducer<GlobalAction, State, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/reducer/contramap(environment:)",
                "title": "func contramap<GlobalEnvironment>(environment: (GlobalEnvironment) -> Environment) -> Reducer<Action, State, GlobalEnvironment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/reducer/contramap(state:)-5etrg",
                "title": "func contramap<GlobalState>(state: WritableKeyPath<GlobalState, State>) -> Reducer<Action, GlobalState, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/reducer/contramap(state:)-ac69",
                "title": "func contramap<GlobalState>(state: CasePath<GlobalState, State>) -> Reducer<Action, GlobalState, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/reducer/debug(_:action:state:)",
                "title": "func debug(String?, action: ActionLogFormat?, state: StateLogFormat?) -> Reducer<Action, State, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/reducer/log(format:)",
                "title": "func log(format: LogFormat?) -> Reducer<Action, State, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/reducer/map(id:)",
                "title": "func map<ID>(id: (EffectID?) -> ID?) -> Reducer<Action, State, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/reducer/map(queue:)",
                "title": "func map<Queue>(queue: (EffectQueue?) -> Queue?) -> Reducer<Action, State, Environment>",
                "type": "method"
              },
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/reducer/empty",
                "title": "static var empty: Reducer<Action, State, Environment>",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/reducer/combine(_:)-635b0",
                "title": "static func combine(Reducer<Action, State, Environment>...) -> Reducer<Action, State, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/reducer/combine(_:)-6exc",
                "title": "static func combine([Reducer<Action, State, Environment>]) -> Reducer<Action, State, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/reducer/debug(_:action:state:_:)",
                "title": "static func debug(String?, action: ActionLogFormat?, state: StateLogFormat?, (Action, inout State, Environment) -> Effect<Action>) -> Reducer<Action, State, Environment>",
                "type": "method"
              },
              {
                "path": "/documentation/actomatonui/reducer/log(format:_:)",
                "title": "static func log(format: LogFormat?, (Action, inout State, Environment) -> Effect<Action>) -> Reducer<Action, State, Environment>",
                "type": "method"
              }
            ],
            "path": "/documentation/actomatonui/reducer",
            "title": "Reducer",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Type Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/statelogformat/diff",
                "title": "static let diff: StateLogFormat",
                "type": "property"
              },
              {
                "path": "/documentation/actomatonui/statelogformat/simple",
                "title": "static let simple: StateLogFormat",
                "type": "property"
              },
              {
                "title": "Type Methods",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/statelogformat/all(maxdepth:)",
                "title": "static func all(maxDepth: Int) -> StateLogFormat",
                "type": "method"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/statelogformat/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomatonui/statelogformat/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/statelogformat",
            "title": "StateLogFormat",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/storeconfiguration/init(logformat:)",
                "title": "init(logFormat: LogFormat?)",
                "type": "init"
              }
            ],
            "path": "/documentation/actomatonui/storeconfiguration",
            "title": "StoreConfiguration",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Initializers",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/withviewstore/init(_:_:)",
                "title": "init<Environment>(Store<Action, State, Environment>, @MainActor (ViewStore<Action, State>) -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/withviewstore/init(_:arestatesequal:_:)",
                "title": "init<Environment>(Store<Action, State, Environment>, areStatesEqual: (State, State) -> Bool, @MainActor (ViewStore<Action, State>) -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/withviewstore/init(_:arestatesequal:content:)",
                "title": "init<Environment>(Store<Action, State, Environment>, areStatesEqual: (State, State) -> Bool, content: @MainActor (ViewStore<Action, State>) -> Content)",
                "type": "init"
              },
              {
                "path": "/documentation/actomatonui/withviewstore/init(_:content:)",
                "title": "init<Environment>(Store<Action, State, Environment>, content: @MainActor (ViewStore<Action, State>) -> Content)",
                "type": "init"
              },
              {
                "title": "Instance Properties",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/withviewstore/body",
                "title": "var body: Content",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accentcolor(_:)",
                    "title": "func accentColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(activationpoint:)-5m9qy",
                    "title": "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(activationpoint:)-7vyio",
                    "title": "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(addtraits:)",
                    "title": "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(hidden:)",
                    "title": "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(hint:)",
                    "title": "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(identifier:)",
                    "title": "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(inputlabels:)",
                    "title": "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(label:)",
                    "title": "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(removetraits:)",
                    "title": "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(selectionidentifier:)",
                    "title": "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(sortpriority:)",
                    "title": "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/accessibility(value:)",
                    "title": "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityaction(_:_:)",
                    "title": "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityaction(action:label:)",
                    "title": "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityaction(named:_:)",
                    "title": "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityactions(_:)",
                    "title": "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityactivationpoint(_:)-25579",
                    "title": "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityactivationpoint(_:)-8cof9",
                    "title": "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityaddtraits(_:)",
                    "title": "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityadjustableaction(_:)",
                    "title": "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitychartdescriptor(_:)",
                    "title": "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitychildren(children:)",
                    "title": "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitycustomcontent(_:_:importance:)-1g4vr",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitycustomcontent(_:_:importance:)-1y6v0",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitycustomcontent(_:_:importance:)-2tf3b",
                    "title": "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitycustomcontent(_:_:importance:)-3m9lr",
                    "title": "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitycustomcontent(_:_:importance:)-3usfq",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitycustomcontent(_:_:importance:)-40l4t",
                    "title": "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitycustomcontent(_:_:importance:)-691q2",
                    "title": "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitycustomcontent(_:_:importance:)-79g85",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitydirecttouch(_:options:)",
                    "title": "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityelement(children:)",
                    "title": "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityfocused(_:)",
                    "title": "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityfocused(_:equals:)",
                    "title": "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityheading(_:)",
                    "title": "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityhidden(_:)",
                    "title": "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityhint(_:)-3qdtj",
                    "title": "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityhint(_:)-460r3",
                    "title": "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityhint(_:)-4aqgd",
                    "title": "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityidentifier(_:)",
                    "title": "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityignoresinvertcolors(_:)",
                    "title": "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityinputlabels(_:)-2mln4",
                    "title": "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityinputlabels(_:)-5pq6z",
                    "title": "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityinputlabels(_:)-86ajm",
                    "title": "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitylabel(_:)-21h2j",
                    "title": "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitylabel(_:)-54ib1",
                    "title": "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitylabel(_:)-5ey6p",
                    "title": "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitylabeledpair(role:id:in:)",
                    "title": "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitylinkedgroup(id:in:)",
                    "title": "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityremovetraits(_:)",
                    "title": "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrepresentation(representation:)",
                    "title": "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrespondstouserinteraction(_:)",
                    "title": "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:)-57g6e",
                    "title": "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:)-6exwg",
                    "title": "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:)-97qyl",
                    "title": "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:)-9gmqb",
                    "title": "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:entryid:entrylabel:)-4jnyz",
                    "title": "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:entryid:entrylabel:)-5iccw",
                    "title": "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:entryid:entrylabel:)-6zym9",
                    "title": "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:entryid:entrylabel:)-7zzib",
                    "title": "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:entrylabel:)-3zkog",
                    "title": "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:entrylabel:)-695xt",
                    "title": "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:entrylabel:)-6of6q",
                    "title": "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:entries:entrylabel:)-6zuw9",
                    "title": "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:textranges:)-103tr",
                    "title": "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:textranges:)-68zoz",
                    "title": "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:textranges:)-7nrfz",
                    "title": "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotor(_:textranges:)-anvy",
                    "title": "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityrotorentry(id:in:)",
                    "title": "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityscrollaction(_:)",
                    "title": "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityshowslargecontentviewer()",
                    "title": "func accessibilityShowsLargeContentViewer() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityshowslargecontentviewer(_:)",
                    "title": "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitysortpriority(_:)",
                    "title": "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilitytextcontenttype(_:)",
                    "title": "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityvalue(_:)-4kqeh",
                    "title": "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityvalue(_:)-50r3d",
                    "title": "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityvalue(_:)-6e3t2",
                    "title": "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/accessibilityzoomaction(_:)",
                    "title": "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/actionsheet(ispresented:content:)",
                    "title": "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/actionsheet(item:content:)",
                    "title": "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:actions:)-1m5am",
                    "title": "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:actions:)-6qius",
                    "title": "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:actions:)-83bhy",
                    "title": "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:actions:message:)-1kg5f",
                    "title": "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:actions:message:)-3x1x2",
                    "title": "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:actions:message:)-82nht",
                    "title": "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:presenting:actions:)-31smq",
                    "title": "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:presenting:actions:)-9uvmq",
                    "title": "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:presenting:actions:)-wq44",
                    "title": "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:presenting:actions:message:)-2fa08",
                    "title": "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:presenting:actions:message:)-7siio",
                    "title": "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(_:ispresented:presenting:actions:message:)-co71",
                    "title": "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/alert(ispresented:content:)",
                    "title": "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(ispresented:error:actions:)",
                    "title": "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alert(ispresented:error:actions:message:)",
                    "title": "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/alert(item:content:)",
                    "title": "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alignmentguide(_:computevalue:)-51brd",
                    "title": "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alignmentguide(_:computevalue:)-6oj0q",
                    "title": "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/alloweddynamicrange(_:)",
                    "title": "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/allowshittesting(_:)",
                    "title": "func allowsHitTesting(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/allowstightening(_:)",
                    "title": "func allowsTightening(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/anchorpreference(key:value:transform:)",
                    "title": "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/animation(_:)",
                    "title": "func animation(Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/animation(_:body:)",
                    "title": "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/animation(_:value:)",
                    "title": "func animation<V>(Animation?, value: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/aspectratio(_:contentmode:)-42b10",
                    "title": "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/aspectratio(_:contentmode:)-4rvdi",
                    "title": "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/autocapitalization(_:)",
                    "title": "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/autocorrectiondisabled(_:)",
                    "title": "func autocorrectionDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/background(_:alignment:)",
                    "title": "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/background(_:ignoressafeareaedges:)",
                    "title": "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/background(_:in:fillstyle:)-1gohm",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/background(_:in:fillstyle:)-4qnbu",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/background(alignment:content:)",
                    "title": "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/background(ignoressafeareaedges:)",
                    "title": "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/background(in:fillstyle:)-2d8oi",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/background(in:fillstyle:)-7c6om",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/backgroundpreferencevalue(_:_:)",
                    "title": "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/backgroundpreferencevalue(_:alignment:_:)",
                    "title": "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/backgroundstyle(_:)",
                    "title": "func backgroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/badge(_:)-1ccik",
                    "title": "func badge(LocalizedStringKey?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/badge(_:)-1xg5c",
                    "title": "func badge<S>(S?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/badge(_:)-4pe3c",
                    "title": "func badge(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/badge(_:)-6rr3s",
                    "title": "func badge(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/badgeprominence(_:)",
                    "title": "func badgeProminence(BadgeProminence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/baselineoffset(_:)",
                    "title": "func baselineOffset(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/blendmode(_:)",
                    "title": "func blendMode(BlendMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/blur(radius:opaque:)",
                    "title": "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/bold(_:)",
                    "title": "func bold(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/border(_:width:)",
                    "title": "func border<S>(S, width: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/brightness(_:)",
                    "title": "func brightness(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/buttonbordershape(_:)",
                    "title": "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/buttonrepeatbehavior(_:)",
                    "title": "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/buttonstyle(_:)-73ksy",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/buttonstyle(_:)-8a6kd",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/clipshape(_:style:)",
                    "title": "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/clipped(antialiased:)",
                    "title": "func clipped(antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/coloreffect(_:isenabled:)",
                    "title": "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/colorinvert()",
                    "title": "func colorInvert() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/colormultiply(_:)",
                    "title": "func colorMultiply(Color) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/colorscheme(_:)",
                    "title": "func colorScheme(ColorScheme) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/compositinggroup()",
                    "title": "func compositingGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:actions:)-2xy43",
                    "title": "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:actions:)-4hkvv",
                    "title": "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:actions:)-9wyaj",
                    "title": "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1r8ng",
                    "title": "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4r63t",
                    "title": "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7ikob",
                    "title": "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1ll55",
                    "title": "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7tc9w",
                    "title": "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-vkd6",
                    "title": "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-38wnv",
                    "title": "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9k3ss",
                    "title": "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9xlig",
                    "title": "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/containerbackground(_:for:)",
                    "title": "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/containerbackground(for:alignment:content:)",
                    "title": "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/containerrelativeframe(_:alignment:)",
                    "title": "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/containerrelativeframe(_:alignment:_:)",
                    "title": "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title": "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/containershape(_:)",
                    "title": "func containerShape<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/contentmargins(_:_:for:)-4evd7",
                    "title": "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/contentmargins(_:_:for:)-8us7p",
                    "title": "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/contentmargins(_:for:)",
                    "title": "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/contentshape(_:_:eofill:)",
                    "title": "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/contentshape(_:eofill:)",
                    "title": "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/contenttransition(_:)",
                    "title": "func contentTransition(ContentTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/contextmenu(_:)",
                    "title": "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title": "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/contextmenu(menuitems:)",
                    "title": "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/contextmenu(menuitems:preview:)",
                    "title": "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/contrast(_:)",
                    "title": "func contrast(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/controlgroupstyle(_:)",
                    "title": "func controlGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/controlsize(_:)",
                    "title": "func controlSize(ControlSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/coordinatespace(_:)",
                    "title": "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/coordinatespace(name:)",
                    "title": "func coordinateSpace<T>(name: T) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/cornerradius(_:antialiased:)",
                    "title": "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/datepickerstyle(_:)",
                    "title": "func datePickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/defaultappstorage(_:)",
                    "title": "func defaultAppStorage(UserDefaults) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/defaultfocus(_:_:priority:)",
                    "title": "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/defaulthovereffect(_:)",
                    "title": "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/defaultscrollanchor(_:)",
                    "title": "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/deferssystemgestures(on:)",
                    "title": "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/deletedisabled(_:)",
                    "title": "func deleteDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/dialogsuppressiontoggle(_:issuppressed:)-2rs4p",
                    "title": "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/dialogsuppressiontoggle(_:issuppressed:)-6tjf7",
                    "title": "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/dialogsuppressiontoggle(_:issuppressed:)-95bm9",
                    "title": "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/dialogsuppressiontoggle(issuppressed:)",
                    "title": "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/disableautocorrection(_:)",
                    "title": "func disableAutocorrection(Bool?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/disabled(_:)",
                    "title": "func disabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/disclosuregroupstyle(_:)",
                    "title": "func disclosureGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title": "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/draggable(_:)",
                    "title": "func draggable<T>(() -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/draggable(_:preview:)",
                    "title": "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/drawinggroup(opaque:colormode:)",
                    "title": "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/dropdestination(for:action:istargeted:)",
                    "title": "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/dynamictypesize(_:)-62fy9",
                    "title": "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/dynamictypesize(_:)-9iaf8",
                    "title": "func dynamicTypeSize<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/edgesignoringsafearea(_:)",
                    "title": "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/environment(_:)",
                    "title": "func environment<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/environment(_:_:)",
                    "title": "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/environmentobject(_:)",
                    "title": "func environmentObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogbrowseroptions(_:)",
                    "title": "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogconfirmationlabel(_:)-3arx4",
                    "title": "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogconfirmationlabel(_:)-3usth",
                    "title": "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogconfirmationlabel(_:)-4a0rf",
                    "title": "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogcustomizationid(_:)",
                    "title": "func fileDialogCustomizationID(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogdefaultdirectory(_:)",
                    "title": "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogimportsunresolvedaliases(_:)",
                    "title": "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogmessage(_:)-369dv",
                    "title": "func fileDialogMessage<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogmessage(_:)-5l710",
                    "title": "func fileDialogMessage(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogmessage(_:)-5mfg6",
                    "title": "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filedialogurlenabled(_:)",
                    "title": "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-48im7",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-7uu8e",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-6gmlc",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-70cgc",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporter(ispresented:documents:contenttype:oncompletion:)-91dev",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporter(ispresented:documents:contenttype:oncompletion:)-96vzf",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1up0u",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-82ij4",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title": "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title": "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporterfilenamelabel(_:)-18hml",
                    "title": "func fileExporterFilenameLabel(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporterfilenamelabel(_:)-4h73y",
                    "title": "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileexporterfilenamelabel(_:)-abno",
                    "title": "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filemover(ispresented:file:oncompletion:)",
                    "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filemover(ispresented:files:oncompletion:)",
                    "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/finddisabled(_:)",
                    "title": "func findDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/findnavigator(ispresented:)",
                    "title": "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fixedsize()",
                    "title": "func fixedSize() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fixedsize(horizontal:vertical:)",
                    "title": "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/flipsforrighttoleftlayoutdirection(_:)",
                    "title": "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focuseffectdisabled(_:)",
                    "title": "func focusEffectDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusable(_:)",
                    "title": "func focusable(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusable(_:interactions:)",
                    "title": "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focused(_:)",
                    "title": "func focused(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focused(_:equals:)",
                    "title": "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusedobject(_:)-5g6p8",
                    "title": "func focusedObject<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusedobject(_:)-8ec0h",
                    "title": "func focusedObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusedsceneobject(_:)-1lgmg",
                    "title": "func focusedSceneObject<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusedsceneobject(_:)-6epqi",
                    "title": "func focusedSceneObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusedscenevalue(_:_:)-95a1p",
                    "title": "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusedscenevalue(_:_:)-95tqx",
                    "title": "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusedvalue(_:)",
                    "title": "func focusedValue<T>(T?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusedvalue(_:_:)-4g82k",
                    "title": "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/focusedvalue(_:_:)-4p9g9",
                    "title": "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/font(_:)",
                    "title": "func font(Font?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fontdesign(_:)",
                    "title": "func fontDesign(Font.Design?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fontweight(_:)",
                    "title": "func fontWeight(Font.Weight?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fontwidth(_:)",
                    "title": "func fontWidth(Font.Width?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/foregroundcolor(_:)",
                    "title": "func foregroundColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/foregroundstyle(_:)",
                    "title": "func foregroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/foregroundstyle(_:_:)",
                    "title": "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/foregroundstyle(_:_:_:)",
                    "title": "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/formstyle(_:)",
                    "title": "func formStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/frame()",
                    "title": "func frame() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title": "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/frame(width:height:alignment:)",
                    "title": "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fullscreencover(ispresented:ondismiss:content:)",
                    "title": "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/fullscreencover(item:ondismiss:content:)",
                    "title": "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/gaugestyle(_:)",
                    "title": "func gaugeStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/geometrygroup()",
                    "title": "func geometryGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/gesture(_:including:)",
                    "title": "func gesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/grayscale(_:)",
                    "title": "func grayscale(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/gridcellanchor(_:)",
                    "title": "func gridCellAnchor(UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/gridcellcolumns(_:)",
                    "title": "func gridCellColumns(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/gridcellunsizedaxes(_:)",
                    "title": "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/gridcolumnalignment(_:)",
                    "title": "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/groupboxstyle(_:)",
                    "title": "func groupBoxStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/handlesexternalevents(preferring:allowing:)",
                    "title": "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/headerprominence(_:)",
                    "title": "func headerProminence(Prominence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/help(_:)-319aq",
                    "title": "func help(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/help(_:)-5c4h5",
                    "title": "func help(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/help(_:)-79hdy",
                    "title": "func help<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/hidden()",
                    "title": "func hidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/highprioritygesture(_:including:)",
                    "title": "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/hovereffect(_:)",
                    "title": "func hoverEffect(HoverEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/hovereffect(_:isenabled:)",
                    "title": "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/hovereffectdisabled(_:)",
                    "title": "func hoverEffectDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/huerotation(_:)",
                    "title": "func hueRotation(Angle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/id(_:)",
                    "title": "func id<ID>(ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/ignoressafearea(_:edges:)",
                    "title": "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/imagescale(_:)",
                    "title": "func imageScale(Image.Scale) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/indexviewstyle(_:)",
                    "title": "func indexViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/inspector(ispresented:content:)",
                    "title": "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/inspectorcolumnwidth(_:)",
                    "title": "func inspectorColumnWidth(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/inspectorcolumnwidth(min:ideal:max:)",
                    "title": "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/interactionactivitytrackingtag(_:)",
                    "title": "func interactionActivityTrackingTag(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/interactivedismissdisabled(_:)",
                    "title": "func interactiveDismissDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/invalidatablecontent(_:)",
                    "title": "func invalidatableContent(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/italic(_:)",
                    "title": "func italic(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/itemprovider(_:)",
                    "title": "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/kerning(_:)",
                    "title": "func kerning(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/keyboardshortcut(_:)-1c3h3",
                    "title": "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/keyboardshortcut(_:)-78tth",
                    "title": "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/keyboardshortcut(_:modifiers:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/keyboardshortcut(_:modifiers:localization:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/keyboardtype(_:)",
                    "title": "func keyboardType(UIKeyboardType) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title": "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title": "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/labelstyle(_:)",
                    "title": "func labelStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/labeledcontentstyle(_:)",
                    "title": "func labeledContentStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/labelshidden()",
                    "title": "func labelsHidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/layereffect(_:maxsampleoffset:isenabled:)",
                    "title": "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/layoutdirectionbehavior(_:)",
                    "title": "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/layoutpriority(_:)",
                    "title": "func layoutPriority(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/layoutvalue(key:value:)",
                    "title": "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/linelimit(_:)",
                    "title": "func lineLimit(Int?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/linelimit(_:reservesspace:)",
                    "title": "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/linespacing(_:)",
                    "title": "func lineSpacing(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listitemtint(_:)-7tava",
                    "title": "func listItemTint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listitemtint(_:)-i2ia",
                    "title": "func listItemTint(ListItemTint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listrowbackground(_:)",
                    "title": "func listRowBackground<V>(V?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listrowinsets(_:)",
                    "title": "func listRowInsets(EdgeInsets?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listrowseparator(_:edges:)",
                    "title": "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listrowseparatortint(_:edges:)",
                    "title": "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listrowspacing(_:)",
                    "title": "func listRowSpacing(CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listsectionseparator(_:edges:)",
                    "title": "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listsectionseparatortint(_:edges:)",
                    "title": "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listsectionspacing(_:)-1gqrx",
                    "title": "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/listsectionspacing(_:)-3hnn7",
                    "title": "func listSectionSpacing(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/liststyle(_:)",
                    "title": "func listStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/luminancetoalpha()",
                    "title": "func luminanceToAlpha() -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/mask(_:)",
                    "title": "func mask<Mask>(Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/mask(alignment:_:)",
                    "title": "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title": "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/menuactiondismissbehavior(_:)",
                    "title": "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/menuindicator(_:)",
                    "title": "func menuIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/menuorder(_:)",
                    "title": "func menuOrder(MenuOrder) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/menustyle(_:)",
                    "title": "func menuStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/minimumscalefactor(_:)",
                    "title": "func minimumScaleFactor(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/modifier(_:)",
                    "title": "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/monospaced(_:)",
                    "title": "func monospaced(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/monospaceddigit()",
                    "title": "func monospacedDigit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/movedisabled(_:)",
                    "title": "func moveDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/multilinetextalignment(_:)",
                    "title": "func multilineTextAlignment(TextAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationbarbackbuttonhidden(_:)",
                    "title": "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationbarhidden(_:)",
                    "title": "func navigationBarHidden(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationbaritems(leading:)",
                    "title": "func navigationBarItems<L>(leading: L) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationbaritems(leading:trailing:)",
                    "title": "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationbaritems(trailing:)",
                    "title": "func navigationBarItems<T>(trailing: T) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationbartitle(_:)-2am8w",
                    "title": "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationbartitle(_:)-5qqwe",
                    "title": "func navigationBarTitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationbartitle(_:)-72765",
                    "title": "func navigationBarTitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationbartitle(_:displaymode:)-56fxb",
                    "title": "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationbartitle(_:displaymode:)-6oyt4",
                    "title": "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationbartitle(_:displaymode:)-8klq8",
                    "title": "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationbartitledisplaymode(_:)",
                    "title": "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationdestination(for:destination:)",
                    "title": "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationdestination(ispresented:destination:)",
                    "title": "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationdestination(item:destination:)",
                    "title": "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationdocument(_:)-23qli",
                    "title": "func navigationDocument(URL) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationdocument(_:)-3ovpa",
                    "title": "func navigationDocument<D>(D) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationdocument(_:preview:)-193xu",
                    "title": "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationdocument(_:preview:)-1ogmr",
                    "title": "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationdocument(_:preview:)-5874n",
                    "title": "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationdocument(_:preview:)-6ermz",
                    "title": "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationsplitviewcolumnwidth(_:)",
                    "title": "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title": "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationsplitviewstyle(_:)",
                    "title": "func navigationSplitViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationtitle(_:)-23pxf",
                    "title": "func navigationTitle(Binding<String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationtitle(_:)-23y9b",
                    "title": "func navigationTitle<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationtitle(_:)-4ebby",
                    "title": "func navigationTitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationtitle(_:)-4zogm",
                    "title": "func navigationTitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/navigationtitle(_:)-9yehd",
                    "title": "func navigationTitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/navigationviewstyle(_:)",
                    "title": "func navigationViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/offset(_:)",
                    "title": "func offset(CGSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/offset(x:y:)",
                    "title": "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onappear(perform:)",
                    "title": "func onAppear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onchange(of:initial:_:)-1uyuc",
                    "title": "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onchange(of:initial:_:)-633rp",
                    "title": "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/onchange(of:perform:)",
                    "title": "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/oncontinueuseractivity(_:perform:)",
                    "title": "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/oncontinuoushover(coordinatespace:perform:)-75agh",
                    "title": "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/oncontinuoushover(coordinatespace:perform:)-7qjhd",
                    "title": "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/ondisappear(perform:)",
                    "title": "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/ondrag(_:)",
                    "title": "func onDrag(() -> NSItemProvider) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/ondrag(_:preview:)",
                    "title": "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/ondrop(of:delegate:)-7ivf2",
                    "title": "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/ondrop(of:delegate:)-7m8c7",
                    "title": "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/ondrop(of:istargeted:perform:)-1hbzj",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/ondrop(of:istargeted:perform:)-4r169",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/ondrop(of:istargeted:perform:)-5hckt",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/ondrop(of:istargeted:perform:)-5rj43",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onhover(perform:)",
                    "title": "func onHover(perform: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onkeypress(_:action:)",
                    "title": "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onkeypress(_:phases:action:)",
                    "title": "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onkeypress(characters:phases:action:)",
                    "title": "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onkeypress(keys:phases:action:)",
                    "title": "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onkeypress(phases:action:)",
                    "title": "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onopenurl(perform:)",
                    "title": "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onpreferencechange(_:perform:)",
                    "title": "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onreceive(_:perform:)",
                    "title": "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/onsubmit(of:_:)",
                    "title": "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/ontapgesture(count:coordinatespace:perform:)-1h05",
                    "title": "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/ontapgesture(count:coordinatespace:perform:)-374n",
                    "title": "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/ontapgesture(count:perform:)",
                    "title": "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/opacity(_:)",
                    "title": "func opacity(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/overlay(_:alignment:)",
                    "title": "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/overlay(_:ignoressafeareaedges:)",
                    "title": "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/overlay(_:in:fillstyle:)",
                    "title": "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/overlay(alignment:content:)",
                    "title": "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/overlaypreferencevalue(_:_:)",
                    "title": "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/overlaypreferencevalue(_:alignment:_:)",
                    "title": "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/padding(_:)-2tcfd",
                    "title": "func padding(EdgeInsets) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/padding(_:)-53qhj",
                    "title": "func padding(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/padding(_:_:)",
                    "title": "func padding(Edge.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/paletteselectioneffect(_:)",
                    "title": "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/persistentsystemoverlays(_:)",
                    "title": "func persistentSystemOverlays(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/phaseanimator(_:content:animation:)",
                    "title": "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/phaseanimator(_:trigger:content:animation:)",
                    "title": "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/pickerstyle(_:)",
                    "title": "func pickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/popover(item:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/position(_:)",
                    "title": "func position(CGPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/position(x:y:)",
                    "title": "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/preference(key:value:)",
                    "title": "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/preferredcolorscheme(_:)",
                    "title": "func preferredColorScheme(ColorScheme?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/presentationbackground(_:)",
                    "title": "func presentationBackground<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/presentationbackground(alignment:content:)",
                    "title": "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/presentationbackgroundinteraction(_:)",
                    "title": "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/presentationcompactadaptation(_:)",
                    "title": "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/presentationcompactadaptation(horizontal:vertical:)",
                    "title": "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/presentationcontentinteraction(_:)",
                    "title": "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/presentationcornerradius(_:)",
                    "title": "func presentationCornerRadius(CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/presentationdetents(_:)",
                    "title": "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/presentationdetents(_:selection:)",
                    "title": "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/presentationdragindicator(_:)",
                    "title": "func presentationDragIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/previewcontext(_:)",
                    "title": "func previewContext<C>(C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/previewdevice(_:)",
                    "title": "func previewDevice(PreviewDevice?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/previewdisplayname(_:)",
                    "title": "func previewDisplayName(String?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/previewinterfaceorientation(_:)",
                    "title": "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/previewlayout(_:)",
                    "title": "func previewLayout(PreviewLayout) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/privacysensitive(_:)",
                    "title": "func privacySensitive(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/progressviewstyle(_:)",
                    "title": "func progressViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/projectioneffect(_:)",
                    "title": "func projectionEffect(ProjectionTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/redacted(reason:)",
                    "title": "func redacted(reason: RedactionReasons) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/refreshable(action:)",
                    "title": "func refreshable(action: () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/renameaction(_:)-3ksgy",
                    "title": "func renameAction(() -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/renameaction(_:)-7ty0x",
                    "title": "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/replacedisabled(_:)",
                    "title": "func replaceDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/rotationeffect(_:anchor:)",
                    "title": "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/safeareainset(edge:alignment:spacing:content:)-1x3zr",
                    "title": "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/safeareainset(edge:alignment:spacing:content:)-9pi05",
                    "title": "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/safeareapadding(_:)-4hmqq",
                    "title": "func safeAreaPadding(EdgeInsets) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/safeareapadding(_:)-74hoj",
                    "title": "func safeAreaPadding(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/safeareapadding(_:_:)",
                    "title": "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/saturation(_:)",
                    "title": "func saturation(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scaleeffect(_:anchor:)-4qio0",
                    "title": "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scaleeffect(_:anchor:)-9c6s6",
                    "title": "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scaleeffect(x:y:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scaledtofill()",
                    "title": "func scaledToFill() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scaledtofit()",
                    "title": "func scaledToFit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scenepadding(_:)",
                    "title": "func scenePadding(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scenepadding(_:edges:)",
                    "title": "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrollbouncebehavior(_:axes:)",
                    "title": "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrollclipdisabled(_:)",
                    "title": "func scrollClipDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrollcontentbackground(_:)",
                    "title": "func scrollContentBackground(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrolldisabled(_:)",
                    "title": "func scrollDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrolldismisseskeyboard(_:)",
                    "title": "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrollindicators(_:axes:)",
                    "title": "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrollindicatorsflash(onappear:)",
                    "title": "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrollindicatorsflash(trigger:)",
                    "title": "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrollposition(id:anchor:)",
                    "title": "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrolltargetbehavior(_:)",
                    "title": "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrolltargetlayout(isenabled:)",
                    "title": "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrolltransition(_:axis:transition:)",
                    "title": "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title": "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchcompletion(_:)-4b9tr",
                    "title": "func searchCompletion(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchcompletion(_:)-8m2qj",
                    "title": "func searchCompletion<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchdictationbehavior(_:)",
                    "title": "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchscopes(_:activation:_:)",
                    "title": "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchscopes(_:scopes:)",
                    "title": "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchsuggestions(_:)",
                    "title": "func searchSuggestions<S>(() -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchsuggestions(_:for:)",
                    "title": "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3uhy6",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:editabletokens:ispresented:placement:prompt:token:)-69xf0",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:editabletokens:ispresented:placement:prompt:token:)-93ere",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:editabletokens:placement:prompt:token:)-204hg",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:editabletokens:placement:prompt:token:)-2if7w",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:editabletokens:placement:prompt:token:)-9fmst",
                    "title": "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:ispresented:placement:prompt:)-2b1k9",
                    "title": "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:ispresented:placement:prompt:)-4z6cp",
                    "title": "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:ispresented:placement:prompt:)-5c9bf",
                    "title": "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:placement:prompt:)-2ja2d",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:placement:prompt:)-8j0jb",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:placement:prompt:)-9xx0k",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:placement:prompt:suggestions:)-3w7vx",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:placement:prompt:suggestions:)-5cmsk",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:placement:prompt:suggestions:)-gxal",
                    "title": "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:ispresented:placement:prompt:token:)-7ph9h",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:ispresented:placement:prompt:token:)-9w9yg",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:ispresented:placement:prompt:token:)-tgs6",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:placement:prompt:token:)-6pv4s",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:placement:prompt:token:)-7otte",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:placement:prompt:token:)-8y8e3",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4eh2u",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5326o",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5xw4x",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2uxra",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8fzfy",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9qurn",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/selectiondisabled(_:)",
                    "title": "func selectionDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/sensoryfeedback(_:trigger:)",
                    "title": "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/sensoryfeedback(_:trigger:condition:)",
                    "title": "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/sensoryfeedback(trigger:_:)",
                    "title": "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/shadow(color:radius:x:y:)",
                    "title": "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/sheet(ispresented:ondismiss:content:)",
                    "title": "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/sheet(item:ondismiss:content:)",
                    "title": "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/simultaneousgesture(_:including:)",
                    "title": "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/speechadjustedpitch(_:)",
                    "title": "func speechAdjustedPitch(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/speechalwaysincludespunctuation(_:)",
                    "title": "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/speechannouncementsqueued(_:)",
                    "title": "func speechAnnouncementsQueued(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/speechspellsoutcharacters(_:)",
                    "title": "func speechSpellsOutCharacters(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/springloadingbehavior(_:)",
                    "title": "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "/documentation/actomatonui/withviewstore/statusbar(hidden:)",
                    "title": "func statusBar(hidden: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/statusbarhidden(_:)",
                    "title": "func statusBarHidden(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/strikethrough(_:pattern:color:)",
                    "title": "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/submitlabel(_:)",
                    "title": "func submitLabel(SubmitLabel) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/submitscope(_:)",
                    "title": "func submitScope(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/swipeactions(edge:allowsfullswipe:content:)",
                    "title": "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/symboleffect(_:options:isactive:)",
                    "title": "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/symboleffect(_:options:value:)",
                    "title": "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/symboleffectsremoved(_:)",
                    "title": "func symbolEffectsRemoved(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/symbolrenderingmode(_:)",
                    "title": "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/symbolvariant(_:)",
                    "title": "func symbolVariant(SymbolVariants) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/tabitem(_:)",
                    "title": "func tabItem<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/tabviewstyle(_:)",
                    "title": "func tabViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/tablecolumnheaders(_:)",
                    "title": "func tableColumnHeaders(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/tablestyle(_:)",
                    "title": "func tableStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/tag(_:)",
                    "title": "func tag<V>(V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/task(id:priority:_:)",
                    "title": "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/task(priority:_:)",
                    "title": "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/textcase(_:)",
                    "title": "func textCase(Text.Case?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/textcontenttype(_:)",
                    "title": "func textContentType(UITextContentType?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/texteditorstyle(_:)",
                    "title": "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/textfieldstyle(_:)",
                    "title": "func textFieldStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/textinputautocapitalization(_:)",
                    "title": "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/textscale(_:isenabled:)",
                    "title": "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/textselection(_:)",
                    "title": "func textSelection<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/tint(_:)-8xw22",
                    "title": "func tint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/tint(_:)-9cw6f",
                    "title": "func tint<S>(S?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/togglestyle(_:)",
                    "title": "func toggleStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbar(_:for:)",
                    "title": "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbar(content:)-43c4n",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbar(content:)-9i854",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbar(id:content:)",
                    "title": "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbar(removing:)",
                    "title": "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbarbackground(_:for:)-446kv",
                    "title": "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbarbackground(_:for:)-6jdm",
                    "title": "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbarcolorscheme(_:for:)",
                    "title": "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbarrole(_:)",
                    "title": "func toolbarRole(ToolbarRole) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbartitledisplaymode(_:)",
                    "title": "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/toolbartitlemenu(content:)",
                    "title": "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/tracking(_:)",
                    "title": "func tracking(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/transaction(_:)",
                    "title": "func transaction((inout Transaction) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/transaction(_:body:)",
                    "title": "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/transaction(value:_:)",
                    "title": "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/transformanchorpreference(key:value:transform:)",
                    "title": "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/transformeffect(_:)",
                    "title": "func transformEffect(CGAffineTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/transformenvironment(_:transform:)",
                    "title": "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/transformpreference(_:_:)",
                    "title": "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/transition(_:)",
                    "title": "func transition(AnyTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/truncationmode(_:)",
                    "title": "func truncationMode(Text.TruncationMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/typeselectequivalent(_:)-62gqt",
                    "title": "func typeSelectEquivalent(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/typeselectequivalent(_:)-802up",
                    "title": "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/typeselectequivalent(_:)-8mioy",
                    "title": "func typeSelectEquivalent<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/typesettinglanguage(_:isenabled:)-1bupf",
                    "title": "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/typesettinglanguage(_:isenabled:)-40r37",
                    "title": "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/underline(_:pattern:color:)",
                    "title": "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/unredacted()",
                    "title": "func unredacted() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/useractivity(_:element:_:)",
                    "title": "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/useractivity(_:isactive:_:)",
                    "title": "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/visualeffect(_:)",
                    "title": "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/withviewstore/zindex(_:)",
                    "title": "func zIndex(Double) -> some View",
                    "type": "method"
                  }
                ],
                "path": "/documentation/actomatonui/withviewstore/view-implementations",
                "title": "View Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/withviewstore",
            "title": "WithViewStore",
            "type": "struct"
          },
          {
            "title": "Enumerations",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/effectqueuedelay/constant(_:)",
                "title": "case constant(TimeInterval)",
                "type": "case"
              },
              {
                "path": "/documentation/actomatonui/effectqueuedelay/random(_:)",
                "title": "case random(ClosedRange<TimeInterval>)",
                "type": "case"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/effectqueuedelay/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomatonui/effectqueuedelay/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/effectqueuedelay",
            "title": "EffectQueueDelay",
            "type": "enum"
          },
          {
            "children": [
              {
                "title": "Enumeration Cases",
                "type": "groupMarker"
              },
              {
                "path": "/documentation/actomatonui/effectqueuepolicy/runnewest(maxcount:)",
                "title": "case runNewest(maxCount: Int)",
                "type": "case"
              },
              {
                "path": "/documentation/actomatonui/effectqueuepolicy/runoldest(maxcount:_:)",
                "title": "case runOldest(maxCount: Int, EffectQueuePolicy.OverflowPolicy)",
                "type": "case"
              },
              {
                "title": "Enumerations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Enumeration Cases",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/effectqueuepolicy/overflowpolicy/discardnew",
                    "title": "case discardNew",
                    "type": "case"
                  },
                  {
                    "path": "/documentation/actomatonui/effectqueuepolicy/overflowpolicy/suspendnew",
                    "title": "case suspendNew",
                    "type": "case"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "/documentation/actomatonui/effectqueuepolicy/overflowpolicy/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "/documentation/actomatonui/effectqueuepolicy/overflowpolicy/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "symbol"
                  }
                ],
                "path": "/documentation/actomatonui/effectqueuepolicy/overflowpolicy",
                "title": "EffectQueuePolicy.OverflowPolicy",
                "type": "enum"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Operators",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/effectqueuepolicy/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  }
                ],
                "path": "/documentation/actomatonui/effectqueuepolicy/equatable-implementations",
                "title": "Equatable Implementations",
                "type": "symbol"
              }
            ],
            "path": "/documentation/actomatonui/effectqueuepolicy",
            "title": "EffectQueuePolicy",
            "type": "enum"
          },
          {
            "title": "Extended Modules",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Extended Protocols",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/combine/publisher/toasyncstream()",
                    "title": "func toAsyncStream() -> AsyncStream<Output>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/combine/publisher/toasyncthrowingstream()",
                    "title": "func toAsyncThrowingStream() -> AsyncThrowingStream<Output, Swift.Error>",
                    "type": "method"
                  }
                ],
                "path": "/documentation/actomatonui/combine/publisher",
                "title": "Publisher",
                "type": "extension"
              }
            ],
            "path": "/documentation/actomatonui/combine",
            "title": "Combine",
            "type": "extension"
          },
          {
            "children": [
              {
                "title": "Extended Protocols",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/swift/mutablecollection/subscript(safe:)",
                    "title": "subscript(safe _: Index) -> Iterator.Element?",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/actomatonui/swift/mutablecollection",
                "title": "MutableCollection",
                "type": "extension"
              }
            ],
            "path": "/documentation/actomatonui/swift",
            "title": "Swift",
            "type": "extension"
          },
          {
            "children": [
              {
                "title": "Extended Structures",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/swiftui/binding/onset(_:)",
                    "title": "func onSet((_ old: Value, _ new: Value) -> Void) -> Binding<Value>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/swiftui/binding/transform(get:set:)",
                    "title": "func transform<SubValue>(get: (Value) -> SubValue, set: (Value, SubValue) -> Value) -> Binding<SubValue>",
                    "type": "method"
                  },
                  {
                    "path": "/documentation/actomatonui/swiftui/binding/traverse(_:)",
                    "title": "func traverse<SubValue>(WritableKeyPath<Value, SubValue?>) -> Binding<SubValue>?",
                    "type": "method"
                  },
                  {
                    "title": "Subscripts",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/swiftui/binding/subscript(_:)",
                    "title": "subscript<SubValue>(WritableKeyPath<Value, SubValue>) -> Binding<SubValue>",
                    "type": "subscript"
                  },
                  {
                    "path": "/documentation/actomatonui/swiftui/binding/subscript(casepath:)",
                    "title": "subscript<SubValue>(casePath _: CasePath<Value, SubValue>) -> Binding<SubValue?>",
                    "type": "subscript"
                  }
                ],
                "path": "/documentation/actomatonui/swiftui/binding",
                "title": "Binding",
                "type": "extension"
              },
              {
                "children": [
                  {
                    "title": "Initializers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "/documentation/actomatonui/swiftui/foreach/init(store:content:)",
                    "title": "init<C, Action, Environment, InnerContent>(store: Store<Action, C, Environment>, content: (Store<Action, C.Element, Environment>) -> InnerContent)",
                    "type": "init"
                  },
                  {
                    "path": "/documentation/actomatonui/swiftui/foreach/init(store:id:content:)",
                    "title": "init<C, Action, Environment, InnerContent>(store: Store<Action, C, Environment>, id: KeyPath<C.Element, ID>, content: (Store<Action, C.Element, Environment>) -> InnerContent)",
                    "type": "init"
                  }
                ],
                "path": "/documentation/actomatonui/swiftui/foreach",
                "title": "ForEach",
                "type": "extension"
              }
            ],
            "path": "/documentation/actomatonui/swiftui",
            "title": "SwiftUI",
            "type": "extension"
          }
        ],
        "path": "/documentation/actomatonui",
        "title": "ActomatonUI",
        "type": "module"
      }
    ],
    "schemaVersion": {
      "major": 0,
      "minor": 1,
      "patch": 1
    }
  }
}
